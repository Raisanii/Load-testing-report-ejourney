/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 29824.0, "minX": 0.0, "maxY": 208205.0, "series": [{"data": [[0.0, 29824.0], [0.1, 30104.0], [0.2, 31481.0], [0.3, 31481.0], [0.4, 32091.0], [0.5, 32213.0], [0.6, 32411.0], [0.7, 32567.0], [0.8, 32579.0], [0.9, 32791.0], [1.0, 32808.0], [1.1, 32874.0], [1.2, 32984.0], [1.3, 32994.0], [1.4, 32994.0], [1.5, 33153.0], [1.6, 33221.0], [1.7, 33410.0], [1.8, 33579.0], [1.9, 33617.0], [2.0, 33920.0], [2.1, 33997.0], [2.2, 34001.0], [2.3, 34379.0], [2.4, 34517.0], [2.5, 34553.0], [2.6, 34789.0], [2.7, 35184.0], [2.8, 35290.0], [2.9, 35305.0], [3.0, 35306.0], [3.1, 35450.0], [3.2, 35549.0], [3.3, 35625.0], [3.4, 35634.0], [3.5, 35667.0], [3.6, 35699.0], [3.7, 35727.0], [3.8, 35772.0], [3.9, 35857.0], [4.0, 35886.0], [4.1, 35971.0], [4.2, 36139.0], [4.3, 36221.0], [4.4, 36295.0], [4.5, 36419.0], [4.6, 36432.0], [4.7, 36535.0], [4.8, 36536.0], [4.9, 36767.0], [5.0, 37001.0], [5.1, 37180.0], [5.2, 37316.0], [5.3, 37322.0], [5.4, 37405.0], [5.5, 37488.0], [5.6, 37512.0], [5.7, 37529.0], [5.8, 37546.0], [5.9, 37583.0], [6.0, 37696.0], [6.1, 37723.0], [6.2, 37806.0], [6.3, 37916.0], [6.4, 37946.0], [6.5, 38018.0], [6.6, 38322.0], [6.7, 38449.0], [6.8, 38470.0], [6.9, 38484.0], [7.0, 38520.0], [7.1, 38520.0], [7.2, 38560.0], [7.3, 38571.0], [7.4, 38579.0], [7.5, 38586.0], [7.6, 38749.0], [7.7, 38790.0], [7.8, 38793.0], [7.9, 38940.0], [8.0, 38985.0], [8.1, 39003.0], [8.2, 39040.0], [8.3, 39049.0], [8.4, 39056.0], [8.5, 39067.0], [8.6, 39134.0], [8.7, 39197.0], [8.8, 39228.0], [8.9, 39262.0], [9.0, 39287.0], [9.1, 39378.0], [9.2, 39381.0], [9.3, 39394.0], [9.4, 39407.0], [9.5, 39419.0], [9.6, 39427.0], [9.7, 39444.0], [9.8, 39463.0], [9.9, 39465.0], [10.0, 39466.0], [10.1, 39471.0], [10.2, 39482.0], [10.3, 39495.0], [10.4, 39495.0], [10.5, 39522.0], [10.6, 39529.0], [10.7, 39534.0], [10.8, 39538.0], [10.9, 39560.0], [11.0, 39567.0], [11.1, 39600.0], [11.2, 39611.0], [11.3, 39623.0], [11.4, 39625.0], [11.5, 39638.0], [11.6, 39644.0], [11.7, 39645.0], [11.8, 39667.0], [11.9, 39677.0], [12.0, 39682.0], [12.1, 39684.0], [12.2, 39689.0], [12.3, 39699.0], [12.4, 39706.0], [12.5, 39707.0], [12.6, 39713.0], [12.7, 39719.0], [12.8, 39724.0], [12.9, 39736.0], [13.0, 39751.0], [13.1, 39757.0], [13.2, 39776.0], [13.3, 39778.0], [13.4, 39782.0], [13.5, 39786.0], [13.6, 39793.0], [13.7, 39797.0], [13.8, 39803.0], [13.9, 39803.0], [14.0, 39821.0], [14.1, 39848.0], [14.2, 39880.0], [14.3, 39897.0], [14.4, 39901.0], [14.5, 39917.0], [14.6, 39936.0], [14.7, 39940.0], [14.8, 39958.0], [14.9, 40099.0], [15.0, 40113.0], [15.1, 40115.0], [15.2, 40139.0], [15.3, 40174.0], [15.4, 40259.0], [15.5, 40279.0], [15.6, 40403.0], [15.7, 40472.0], [15.8, 40629.0], [15.9, 40721.0], [16.0, 40885.0], [16.1, 40899.0], [16.2, 40928.0], [16.3, 40943.0], [16.4, 40954.0], [16.5, 41092.0], [16.6, 41225.0], [16.7, 41245.0], [16.8, 41248.0], [16.9, 41710.0], [17.0, 41720.0], [17.1, 41722.0], [17.2, 41795.0], [17.3, 41937.0], [17.4, 41963.0], [17.5, 42141.0], [17.6, 42229.0], [17.7, 42231.0], [17.8, 42304.0], [17.9, 42496.0], [18.0, 42590.0], [18.1, 42612.0], [18.2, 42662.0], [18.3, 42675.0], [18.4, 42687.0], [18.5, 42791.0], [18.6, 42838.0], [18.7, 42883.0], [18.8, 42885.0], [18.9, 42885.0], [19.0, 42892.0], [19.1, 42983.0], [19.2, 43012.0], [19.3, 43032.0], [19.4, 43048.0], [19.5, 43115.0], [19.6, 43146.0], [19.7, 43416.0], [19.8, 43506.0], [19.9, 43574.0], [20.0, 43786.0], [20.1, 43850.0], [20.2, 43909.0], [20.3, 43942.0], [20.4, 43948.0], [20.5, 43993.0], [20.6, 44004.0], [20.7, 44029.0], [20.8, 44077.0], [20.9, 44109.0], [21.0, 44128.0], [21.1, 44276.0], [21.2, 44544.0], [21.3, 44663.0], [21.4, 44699.0], [21.5, 44729.0], [21.6, 44771.0], [21.7, 44908.0], [21.8, 45236.0], [21.9, 45293.0], [22.0, 45464.0], [22.1, 45795.0], [22.2, 45929.0], [22.3, 46178.0], [22.4, 46252.0], [22.5, 46380.0], [22.6, 46421.0], [22.7, 46463.0], [22.8, 46588.0], [22.9, 46716.0], [23.0, 46739.0], [23.1, 46789.0], [23.2, 46832.0], [23.3, 47104.0], [23.4, 47131.0], [23.5, 47353.0], [23.6, 47470.0], [23.7, 47571.0], [23.8, 47862.0], [23.9, 48000.0], [24.0, 48013.0], [24.1, 48207.0], [24.2, 48312.0], [24.3, 48327.0], [24.4, 48399.0], [24.5, 48422.0], [24.6, 48522.0], [24.7, 48570.0], [24.8, 48576.0], [24.9, 48611.0], [25.0, 48706.0], [25.1, 48753.0], [25.2, 48757.0], [25.3, 48866.0], [25.4, 48934.0], [25.5, 48934.0], [25.6, 48986.0], [25.7, 48995.0], [25.8, 49029.0], [25.9, 49111.0], [26.0, 49170.0], [26.1, 49267.0], [26.2, 49396.0], [26.3, 49405.0], [26.4, 49466.0], [26.5, 49583.0], [26.6, 49704.0], [26.7, 49791.0], [26.8, 49831.0], [26.9, 49836.0], [27.0, 49898.0], [27.1, 50247.0], [27.2, 50601.0], [27.3, 50624.0], [27.4, 50702.0], [27.5, 51130.0], [27.6, 51210.0], [27.7, 51226.0], [27.8, 51270.0], [27.9, 51290.0], [28.0, 51316.0], [28.1, 51353.0], [28.2, 51472.0], [28.3, 51524.0], [28.4, 51531.0], [28.5, 51534.0], [28.6, 51557.0], [28.7, 51641.0], [28.8, 51651.0], [28.9, 51664.0], [29.0, 51696.0], [29.1, 51752.0], [29.2, 51811.0], [29.3, 51813.0], [29.4, 51848.0], [29.5, 51901.0], [29.6, 51934.0], [29.7, 51944.0], [29.8, 52023.0], [29.9, 52045.0], [30.0, 52046.0], [30.1, 52058.0], [30.2, 52066.0], [30.3, 52070.0], [30.4, 52109.0], [30.5, 52131.0], [30.6, 52151.0], [30.7, 52279.0], [30.8, 52288.0], [30.9, 52289.0], [31.0, 52368.0], [31.1, 52414.0], [31.2, 52421.0], [31.3, 52449.0], [31.4, 52501.0], [31.5, 52553.0], [31.6, 52561.0], [31.7, 52562.0], [31.8, 52646.0], [31.9, 52649.0], [32.0, 52657.0], [32.1, 52707.0], [32.2, 52758.0], [32.3, 52921.0], [32.4, 52921.0], [32.5, 52949.0], [32.6, 52961.0], [32.7, 52986.0], [32.8, 53063.0], [32.9, 53372.0], [33.0, 53484.0], [33.1, 53557.0], [33.2, 53623.0], [33.3, 53765.0], [33.4, 53899.0], [33.5, 54150.0], [33.6, 54181.0], [33.7, 54186.0], [33.8, 54418.0], [33.9, 54531.0], [34.0, 54605.0], [34.1, 54632.0], [34.2, 54675.0], [34.3, 54688.0], [34.4, 54706.0], [34.5, 54727.0], [34.6, 54729.0], [34.7, 54796.0], [34.8, 54815.0], [34.9, 54815.0], [35.0, 54825.0], [35.1, 54828.0], [35.2, 54911.0], [35.3, 54922.0], [35.4, 54923.0], [35.5, 54925.0], [35.6, 54993.0], [35.7, 55000.0], [35.8, 55001.0], [35.9, 55025.0], [36.0, 55026.0], [36.1, 55026.0], [36.2, 55031.0], [36.3, 55052.0], [36.4, 55095.0], [36.5, 55126.0], [36.6, 55173.0], [36.7, 55180.0], [36.8, 55210.0], [36.9, 55327.0], [37.0, 55327.0], [37.1, 55373.0], [37.2, 55400.0], [37.3, 55422.0], [37.4, 55508.0], [37.5, 55537.0], [37.6, 55542.0], [37.7, 55557.0], [37.8, 55582.0], [37.9, 55639.0], [38.0, 55656.0], [38.1, 55737.0], [38.2, 55737.0], [38.3, 55779.0], [38.4, 55789.0], [38.5, 55851.0], [38.6, 55860.0], [38.7, 55933.0], [38.8, 55985.0], [38.9, 56114.0], [39.0, 56145.0], [39.1, 56241.0], [39.2, 56289.0], [39.3, 56304.0], [39.4, 56478.0], [39.5, 56538.0], [39.6, 56625.0], [39.7, 56710.0], [39.8, 57304.0], [39.9, 64297.0], [40.0, 64601.0], [40.1, 65083.0], [40.2, 65127.0], [40.3, 65219.0], [40.4, 65434.0], [40.5, 65740.0], [40.6, 65845.0], [40.7, 66143.0], [40.8, 66187.0], [40.9, 66250.0], [41.0, 66829.0], [41.1, 66953.0], [41.2, 66965.0], [41.3, 67128.0], [41.4, 67375.0], [41.5, 67490.0], [41.6, 67807.0], [41.7, 67847.0], [41.8, 68039.0], [41.9, 68133.0], [42.0, 68184.0], [42.1, 68365.0], [42.2, 68501.0], [42.3, 68516.0], [42.4, 68719.0], [42.5, 68779.0], [42.6, 68787.0], [42.7, 68806.0], [42.8, 68890.0], [42.9, 68897.0], [43.0, 68910.0], [43.1, 68952.0], [43.2, 69056.0], [43.3, 69064.0], [43.4, 69080.0], [43.5, 69142.0], [43.6, 69158.0], [43.7, 69185.0], [43.8, 69283.0], [43.9, 69298.0], [44.0, 69305.0], [44.1, 69523.0], [44.2, 69779.0], [44.3, 69803.0], [44.4, 70098.0], [44.5, 70214.0], [44.6, 70265.0], [44.7, 70283.0], [44.8, 70405.0], [44.9, 71000.0], [45.0, 71019.0], [45.1, 71038.0], [45.2, 71065.0], [45.3, 71085.0], [45.4, 71095.0], [45.5, 71124.0], [45.6, 71180.0], [45.7, 71181.0], [45.8, 71200.0], [45.9, 71227.0], [46.0, 71236.0], [46.1, 71275.0], [46.2, 71299.0], [46.3, 71323.0], [46.4, 71343.0], [46.5, 71353.0], [46.6, 71362.0], [46.7, 71371.0], [46.8, 71396.0], [46.9, 71406.0], [47.0, 71439.0], [47.1, 71531.0], [47.2, 71574.0], [47.3, 71587.0], [47.4, 71600.0], [47.5, 71605.0], [47.6, 71624.0], [47.7, 71664.0], [47.8, 71679.0], [47.9, 71692.0], [48.0, 71700.0], [48.1, 71705.0], [48.2, 71804.0], [48.3, 71806.0], [48.4, 71828.0], [48.5, 71864.0], [48.6, 71866.0], [48.7, 71907.0], [48.8, 71916.0], [48.9, 71926.0], [49.0, 71929.0], [49.1, 71945.0], [49.2, 72016.0], [49.3, 72052.0], [49.4, 72092.0], [49.5, 72140.0], [49.6, 72149.0], [49.7, 72169.0], [49.8, 72212.0], [49.9, 72228.0], [50.0, 72298.0], [50.1, 72314.0], [50.2, 72379.0], [50.3, 72532.0], [50.4, 72542.0], [50.5, 72724.0], [50.6, 72815.0], [50.7, 72817.0], [50.8, 72920.0], [50.9, 72929.0], [51.0, 72949.0], [51.1, 73036.0], [51.2, 73096.0], [51.3, 73144.0], [51.4, 73205.0], [51.5, 73523.0], [51.6, 74048.0], [51.7, 74081.0], [51.8, 74097.0], [51.9, 74134.0], [52.0, 96671.0], [52.1, 96889.0], [52.2, 97210.0], [52.3, 97244.0], [52.4, 97303.0], [52.5, 97426.0], [52.6, 97548.0], [52.7, 97581.0], [52.8, 97594.0], [52.9, 97743.0], [53.0, 97781.0], [53.1, 97889.0], [53.2, 97936.0], [53.3, 98124.0], [53.4, 98246.0], [53.5, 98307.0], [53.6, 98432.0], [53.7, 98540.0], [53.8, 98761.0], [53.9, 98893.0], [54.0, 99174.0], [54.1, 99195.0], [54.2, 99328.0], [54.3, 99336.0], [54.4, 99619.0], [54.5, 99895.0], [54.6, 99997.0], [54.7, 100011.0], [54.8, 100129.0], [54.9, 100185.0], [55.0, 100205.0], [55.1, 100216.0], [55.2, 100218.0], [55.3, 100241.0], [55.4, 100278.0], [55.5, 100522.0], [55.6, 100574.0], [55.7, 100606.0], [55.8, 100609.0], [55.9, 100699.0], [56.0, 100715.0], [56.1, 100724.0], [56.2, 100853.0], [56.3, 101017.0], [56.4, 101022.0], [56.5, 101094.0], [56.6, 101113.0], [56.7, 101145.0], [56.8, 101191.0], [56.9, 101278.0], [57.0, 101371.0], [57.1, 101463.0], [57.2, 101471.0], [57.3, 101583.0], [57.4, 101610.0], [57.5, 101840.0], [57.6, 101918.0], [57.7, 102038.0], [57.8, 102090.0], [57.9, 102107.0], [58.0, 102235.0], [58.1, 102297.0], [58.2, 102527.0], [58.3, 102993.0], [58.4, 103030.0], [58.5, 103141.0], [58.6, 103166.0], [58.7, 103177.0], [58.8, 103194.0], [58.9, 103225.0], [59.0, 103250.0], [59.1, 103293.0], [59.2, 103311.0], [59.3, 103453.0], [59.4, 103458.0], [59.5, 103511.0], [59.6, 103535.0], [59.7, 103595.0], [59.8, 103602.0], [59.9, 103631.0], [60.0, 103663.0], [60.1, 103664.0], [60.2, 103671.0], [60.3, 103763.0], [60.4, 103770.0], [60.5, 103786.0], [60.6, 103818.0], [60.7, 103852.0], [60.8, 103877.0], [60.9, 103887.0], [61.0, 103926.0], [61.1, 103986.0], [61.2, 103993.0], [61.3, 103997.0], [61.4, 104028.0], [61.5, 104048.0], [61.6, 104067.0], [61.7, 104151.0], [61.8, 104153.0], [61.9, 104173.0], [62.0, 104201.0], [62.1, 104231.0], [62.2, 104235.0], [62.3, 104248.0], [62.4, 104296.0], [62.5, 104297.0], [62.6, 104350.0], [62.7, 104363.0], [62.8, 104391.0], [62.9, 104506.0], [63.0, 104514.0], [63.1, 104567.0], [63.2, 104582.0], [63.3, 104681.0], [63.4, 104778.0], [63.5, 104855.0], [63.6, 105246.0], [63.7, 105289.0], [63.8, 105310.0], [63.9, 105367.0], [64.0, 106004.0], [64.1, 106027.0], [64.2, 107841.0], [64.3, 164654.0], [64.4, 165324.0], [64.5, 165368.0], [64.6, 165380.0], [64.7, 165495.0], [64.8, 165739.0], [64.9, 165829.0], [65.0, 165929.0], [65.1, 165956.0], [65.2, 166068.0], [65.3, 166518.0], [65.4, 166636.0], [65.5, 166805.0], [65.6, 167001.0], [65.7, 167003.0], [65.8, 167066.0], [65.9, 167132.0], [66.0, 167171.0], [66.1, 167178.0], [66.2, 167296.0], [66.3, 167313.0], [66.4, 167354.0], [66.5, 167379.0], [66.6, 167503.0], [66.7, 167507.0], [66.8, 167674.0], [66.9, 167785.0], [67.0, 167806.0], [67.1, 167816.0], [67.2, 167884.0], [67.3, 167907.0], [67.4, 168025.0], [67.5, 168041.0], [67.6, 168056.0], [67.7, 168298.0], [67.8, 168392.0], [67.9, 168431.0], [68.0, 168478.0], [68.1, 168592.0], [68.2, 168620.0], [68.3, 168689.0], [68.4, 168711.0], [68.5, 168726.0], [68.6, 168839.0], [68.7, 168869.0], [68.8, 168893.0], [68.9, 168997.0], [69.0, 169023.0], [69.1, 169025.0], [69.2, 169069.0], [69.3, 169083.0], [69.4, 169113.0], [69.5, 169119.0], [69.6, 169129.0], [69.7, 169264.0], [69.8, 169281.0], [69.9, 169415.0], [70.0, 169476.0], [70.1, 169507.0], [70.2, 169527.0], [70.3, 169544.0], [70.4, 169569.0], [70.5, 169575.0], [70.6, 169620.0], [70.7, 169660.0], [70.8, 169695.0], [70.9, 169782.0], [71.0, 169831.0], [71.1, 169927.0], [71.2, 170082.0], [71.3, 170095.0], [71.4, 170138.0], [71.5, 170170.0], [71.6, 170183.0], [71.7, 170202.0], [71.8, 170264.0], [71.9, 170295.0], [72.0, 170310.0], [72.1, 170344.0], [72.2, 170381.0], [72.3, 170402.0], [72.4, 170413.0], [72.5, 170419.0], [72.6, 170425.0], [72.7, 170507.0], [72.8, 170507.0], [72.9, 170550.0], [73.0, 170697.0], [73.1, 170763.0], [73.2, 170766.0], [73.3, 170775.0], [73.4, 170878.0], [73.5, 170926.0], [73.6, 171008.0], [73.7, 171020.0], [73.8, 171042.0], [73.9, 171043.0], [74.0, 171096.0], [74.1, 171160.0], [74.2, 171167.0], [74.3, 171287.0], [74.4, 171359.0], [74.5, 171400.0], [74.6, 171456.0], [74.7, 171463.0], [74.8, 171559.0], [74.9, 171564.0], [75.0, 171687.0], [75.1, 171729.0], [75.2, 171774.0], [75.3, 171816.0], [75.4, 172024.0], [75.5, 172060.0], [75.6, 172107.0], [75.7, 172118.0], [75.8, 172198.0], [75.9, 172219.0], [76.0, 172260.0], [76.1, 172283.0], [76.2, 172293.0], [76.3, 172331.0], [76.4, 172342.0], [76.5, 172354.0], [76.6, 172389.0], [76.7, 172398.0], [76.8, 172399.0], [76.9, 172406.0], [77.0, 172474.0], [77.1, 172490.0], [77.2, 172494.0], [77.3, 172537.0], [77.4, 172579.0], [77.5, 172598.0], [77.6, 172618.0], [77.7, 172662.0], [77.8, 172667.0], [77.9, 172711.0], [78.0, 172794.0], [78.1, 172899.0], [78.2, 172945.0], [78.3, 173019.0], [78.4, 173086.0], [78.5, 173118.0], [78.6, 173213.0], [78.7, 173227.0], [78.8, 173236.0], [78.9, 173241.0], [79.0, 173254.0], [79.1, 173263.0], [79.2, 173264.0], [79.3, 173303.0], [79.4, 173336.0], [79.5, 173346.0], [79.6, 173374.0], [79.7, 173383.0], [79.8, 173389.0], [79.9, 173402.0], [80.0, 173424.0], [80.1, 173455.0], [80.2, 173456.0], [80.3, 173456.0], [80.4, 173495.0], [80.5, 173525.0], [80.6, 173547.0], [80.7, 173579.0], [80.8, 173598.0], [80.9, 173601.0], [81.0, 173646.0], [81.1, 173745.0], [81.2, 173759.0], [81.3, 173797.0], [81.4, 174044.0], [81.5, 174148.0], [81.6, 174169.0], [81.7, 174223.0], [81.8, 174253.0], [81.9, 174297.0], [82.0, 174345.0], [82.1, 174369.0], [82.2, 174411.0], [82.3, 174485.0], [82.4, 174502.0], [82.5, 174599.0], [82.6, 174618.0], [82.7, 174636.0], [82.8, 174964.0], [82.9, 174970.0], [83.0, 174983.0], [83.1, 174984.0], [83.2, 174988.0], [83.3, 175073.0], [83.4, 175101.0], [83.5, 175102.0], [83.6, 175205.0], [83.7, 175234.0], [83.8, 175254.0], [83.9, 175641.0], [84.0, 175660.0], [84.1, 175673.0], [84.2, 175845.0], [84.3, 175888.0], [84.4, 175903.0], [84.5, 176047.0], [84.6, 176117.0], [84.7, 176142.0], [84.8, 176207.0], [84.9, 176228.0], [85.0, 176249.0], [85.1, 176320.0], [85.2, 176390.0], [85.3, 176427.0], [85.4, 176659.0], [85.5, 176678.0], [85.6, 176741.0], [85.7, 176811.0], [85.8, 176862.0], [85.9, 176891.0], [86.0, 176926.0], [86.1, 176932.0], [86.2, 176984.0], [86.3, 177174.0], [86.4, 177198.0], [86.5, 177221.0], [86.6, 177263.0], [86.7, 177268.0], [86.8, 177331.0], [86.9, 177596.0], [87.0, 177630.0], [87.1, 177640.0], [87.2, 177665.0], [87.3, 177666.0], [87.4, 177803.0], [87.5, 177837.0], [87.6, 177841.0], [87.7, 177932.0], [87.8, 178019.0], [87.9, 178046.0], [88.0, 178193.0], [88.1, 178238.0], [88.2, 178325.0], [88.3, 178383.0], [88.4, 178425.0], [88.5, 178464.0], [88.6, 178500.0], [88.7, 178520.0], [88.8, 178536.0], [88.9, 178626.0], [89.0, 178695.0], [89.1, 178736.0], [89.2, 178855.0], [89.3, 178902.0], [89.4, 178925.0], [89.5, 179135.0], [89.6, 179182.0], [89.7, 179217.0], [89.8, 179631.0], [89.9, 179911.0], [90.0, 179981.0], [90.1, 179991.0], [90.2, 180028.0], [90.3, 180041.0], [90.4, 180322.0], [90.5, 180340.0], [90.6, 180362.0], [90.7, 180401.0], [90.8, 180483.0], [90.9, 180873.0], [91.0, 181235.0], [91.1, 181296.0], [91.2, 181349.0], [91.3, 181410.0], [91.4, 181514.0], [91.5, 181559.0], [91.6, 181674.0], [91.7, 182005.0], [91.8, 182128.0], [91.9, 182235.0], [92.0, 182273.0], [92.1, 182584.0], [92.2, 182723.0], [92.3, 182860.0], [92.4, 182869.0], [92.5, 183176.0], [92.6, 183189.0], [92.7, 183341.0], [92.8, 183660.0], [92.9, 183754.0], [93.0, 184454.0], [93.1, 184675.0], [93.2, 184801.0], [93.3, 184875.0], [93.4, 184892.0], [93.5, 185479.0], [93.6, 185589.0], [93.7, 185760.0], [93.8, 185794.0], [93.9, 185816.0], [94.0, 186016.0], [94.1, 186041.0], [94.2, 186137.0], [94.3, 186137.0], [94.4, 186417.0], [94.5, 186458.0], [94.6, 186572.0], [94.7, 186747.0], [94.8, 186751.0], [94.9, 186869.0], [95.0, 186877.0], [95.1, 186940.0], [95.2, 187222.0], [95.3, 187248.0], [95.4, 187268.0], [95.5, 187361.0], [95.6, 187479.0], [95.7, 187523.0], [95.8, 187573.0], [95.9, 187732.0], [96.0, 187740.0], [96.1, 187757.0], [96.2, 187832.0], [96.3, 187939.0], [96.4, 187960.0], [96.5, 188006.0], [96.6, 188082.0], [96.7, 188276.0], [96.8, 188307.0], [96.9, 188330.0], [97.0, 188472.0], [97.1, 188481.0], [97.2, 188515.0], [97.3, 188539.0], [97.4, 188552.0], [97.5, 188877.0], [97.6, 189153.0], [97.7, 189208.0], [97.8, 189849.0], [97.9, 190097.0], [98.0, 190904.0], [98.1, 201198.0], [98.2, 201747.0], [98.3, 202010.0], [98.4, 202453.0], [98.5, 202510.0], [98.6, 202560.0], [98.7, 202738.0], [98.8, 203283.0], [98.9, 203380.0], [99.0, 203542.0], [99.1, 204045.0], [99.2, 204123.0], [99.3, 204884.0], [99.4, 204995.0], [99.5, 205544.0], [99.6, 205888.0], [99.7, 206931.0], [99.8, 207275.0], [99.9, 208205.0]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 29800.0, "maxY": 14.0, "series": [{"data": [[170400.0, 4.0], [167200.0, 1.0], [173600.0, 2.0], [176800.0, 3.0], [180000.0, 2.0], [186400.0, 2.0], [202400.0, 1.0], [171300.0, 1.0], [174500.0, 2.0], [187300.0, 1.0], [203300.0, 1.0], [68300.0, 1.0], [71500.0, 3.0], [73100.0, 1.0], [101900.0, 1.0], [98700.0, 1.0], [103500.0, 3.0], [169000.0, 4.0], [165800.0, 1.0], [172200.0, 4.0], [178600.0, 2.0], [188200.0, 1.0], [34500.0, 2.0], [32900.0, 2.0], [35300.0, 2.0], [36100.0, 1.0], [38500.0, 6.0], [37700.0, 1.0], [40900.0, 3.0], [40100.0, 4.0], [39300.0, 3.0], [42500.0, 1.0], [41700.0, 4.0], [169900.0, 1.0], [44100.0, 2.0], [44900.0, 1.0], [173100.0, 1.0], [176300.0, 2.0], [46500.0, 1.0], [45700.0, 1.0], [182700.0, 1.0], [47300.0, 1.0], [48900.0, 4.0], [189100.0, 1.0], [49700.0, 2.0], [51300.0, 2.0], [52100.0, 3.0], [52900.0, 5.0], [54500.0, 1.0], [53700.0, 1.0], [55300.0, 3.0], [56100.0, 2.0], [65800.0, 1.0], [69000.0, 3.0], [67400.0, 1.0], [72200.0, 3.0], [97800.0, 1.0], [101000.0, 3.0], [104200.0, 6.0], [167600.0, 1.0], [170800.0, 1.0], [177200.0, 3.0], [174000.0, 1.0], [180400.0, 2.0], [183600.0, 1.0], [186800.0, 2.0], [190000.0, 1.0], [168500.0, 1.0], [165300.0, 3.0], [171700.0, 2.0], [174900.0, 5.0], [178100.0, 1.0], [181300.0, 1.0], [187700.0, 3.0], [190900.0, 1.0], [206900.0, 1.0], [68100.0, 2.0], [72900.0, 3.0], [71300.0, 6.0], [69700.0, 1.0], [98500.0, 1.0], [100100.0, 2.0], [103300.0, 1.0], [169400.0, 2.0], [172600.0, 3.0], [175800.0, 2.0], [182200.0, 2.0], [185400.0, 1.0], [32400.0, 1.0], [32000.0, 1.0], [32800.0, 2.0], [33600.0, 1.0], [35200.0, 1.0], [38400.0, 3.0], [37600.0, 1.0], [40000.0, 1.0], [40800.0, 2.0], [39200.0, 3.0], [42400.0, 1.0], [170300.0, 3.0], [167100.0, 3.0], [44000.0, 3.0], [173500.0, 4.0], [179900.0, 3.0], [176700.0, 1.0], [46400.0, 2.0], [183100.0, 2.0], [48800.0, 1.0], [48000.0, 2.0], [51200.0, 4.0], [52000.0, 6.0], [205500.0, 1.0], [55200.0, 1.0], [54400.0, 1.0], [53600.0, 1.0], [68800.0, 3.0], [72000.0, 3.0], [70400.0, 1.0], [100800.0, 1.0], [104000.0, 3.0], [169600.0, 3.0], [172800.0, 1.0], [176000.0, 1.0], [179200.0, 1.0], [188800.0, 1.0], [204800.0, 1.0], [170500.0, 3.0], [167300.0, 3.0], [173700.0, 3.0], [176900.0, 3.0], [183300.0, 1.0], [186500.0, 1.0], [202500.0, 2.0], [68700.0, 3.0], [67100.0, 1.0], [71900.0, 5.0], [73500.0, 1.0], [97500.0, 3.0], [99100.0, 2.0], [100700.0, 2.0], [103900.0, 4.0], [171400.0, 3.0], [168200.0, 1.0], [174600.0, 2.0], [177800.0, 3.0], [187400.0, 1.0], [33900.0, 2.0], [33100.0, 1.0], [34700.0, 1.0], [35500.0, 1.0], [37100.0, 1.0], [37900.0, 2.0], [38700.0, 3.0], [39500.0, 6.0], [42700.0, 1.0], [41900.0, 2.0], [165900.0, 2.0], [169100.0, 3.0], [43500.0, 2.0], [172300.0, 6.0], [178700.0, 1.0], [45900.0, 1.0], [46700.0, 3.0], [188300.0, 2.0], [47500.0, 1.0], [48300.0, 3.0], [49100.0, 2.0], [50700.0, 1.0], [201100.0, 1.0], [52300.0, 1.0], [51500.0, 4.0], [54700.0, 4.0], [55500.0, 5.0], [56300.0, 1.0], [65100.0, 1.0], [66200.0, 1.0], [67800.0, 2.0], [71000.0, 6.0], [98200.0, 1.0], [96600.0, 1.0], [101400.0, 2.0], [99800.0, 1.0], [104600.0, 1.0], [103000.0, 1.0], [107800.0, 1.0], [166800.0, 1.0], [170000.0, 2.0], [173200.0, 7.0], [179600.0, 1.0], [176400.0, 1.0], [182800.0, 2.0], [186000.0, 2.0], [189200.0, 1.0], [202000.0, 1.0], [167700.0, 1.0], [170900.0, 1.0], [174100.0, 2.0], [177300.0, 1.0], [183700.0, 1.0], [186900.0, 1.0], [68500.0, 2.0], [66900.0, 2.0], [71700.0, 2.0], [97300.0, 1.0], [100500.0, 2.0], [102100.0, 1.0], [105300.0, 2.0], [103700.0, 3.0], [165400.0, 1.0], [171800.0, 1.0], [168600.0, 2.0], [178200.0, 1.0], [175000.0, 1.0], [181400.0, 1.0], [187800.0, 1.0], [184600.0, 1.0], [30100.0, 1.0], [32500.0, 2.0], [36200.0, 3.0], [35400.0, 1.0], [37800.0, 1.0], [37000.0, 1.0], [39400.0, 11.0], [40200.0, 2.0], [42600.0, 4.0], [41000.0, 1.0], [169500.0, 5.0], [43400.0, 1.0], [44200.0, 1.0], [172700.0, 2.0], [179100.0, 2.0], [175900.0, 1.0], [185500.0, 1.0], [47400.0, 1.0], [48200.0, 1.0], [49000.0, 1.0], [49800.0, 3.0], [50600.0, 2.0], [52200.0, 3.0], [53000.0, 1.0], [51400.0, 1.0], [54600.0, 4.0], [53800.0, 1.0], [56200.0, 2.0], [55400.0, 2.0], [64200.0, 1.0], [65000.0, 1.0], [69200.0, 2.0], [74000.0, 3.0], [101200.0, 1.0], [99600.0, 1.0], [106000.0, 2.0], [172000.0, 2.0], [168800.0, 3.0], [175200.0, 3.0], [178400.0, 2.0], [181600.0, 1.0], [188000.0, 2.0], [184800.0, 3.0], [204000.0, 1.0], [207200.0, 1.0], [169700.0, 1.0], [166500.0, 1.0], [172900.0, 1.0], [176100.0, 2.0], [182500.0, 1.0], [185700.0, 2.0], [201700.0, 1.0], [204900.0, 1.0], [69100.0, 3.0], [72300.0, 2.0], [97900.0, 1.0], [101100.0, 3.0], [104300.0, 3.0], [170600.0, 1.0], [189800.0, 1.0], [205800.0, 1.0], [35700.0, 2.0], [36500.0, 2.0], [38900.0, 2.0], [37300.0, 2.0], [39700.0, 14.0], [42100.0, 1.0], [42900.0, 1.0], [171500.0, 2.0], [168300.0, 1.0], [43700.0, 1.0], [44500.0, 1.0], [177900.0, 1.0], [46100.0, 1.0], [187500.0, 2.0], [48500.0, 3.0], [49300.0, 1.0], [203500.0, 1.0], [52500.0, 4.0], [51700.0, 1.0], [54900.0, 5.0], [54100.0, 3.0], [53300.0, 1.0], [55700.0, 4.0], [56500.0, 1.0], [57300.0, 1.0], [73000.0, 2.0], [69800.0, 1.0], [71400.0, 2.0], [100200.0, 5.0], [101800.0, 1.0], [103400.0, 2.0], [166000.0, 1.0], [169200.0, 2.0], [172400.0, 4.0], [175600.0, 3.0], [178800.0, 1.0], [182000.0, 1.0], [188400.0, 2.0], [170100.0, 3.0], [173300.0, 6.0], [186100.0, 2.0], [65700.0, 1.0], [68900.0, 2.0], [67300.0, 1.0], [72100.0, 3.0], [97700.0, 2.0], [99300.0, 2.0], [104100.0, 3.0], [102500.0, 1.0], [171000.0, 5.0], [164600.0, 1.0], [167800.0, 3.0], [174200.0, 3.0], [29800.0, 1.0], [31400.0, 1.0], [32200.0, 1.0], [33200.0, 1.0], [34000.0, 1.0], [35600.0, 4.0], [36400.0, 2.0], [38000.0, 1.0], [39600.0, 13.0], [40400.0, 2.0], [41200.0, 3.0], [42800.0, 4.0], [171900.0, 1.0], [168700.0, 2.0], [175100.0, 2.0], [178300.0, 2.0], [45200.0, 2.0], [46800.0, 1.0], [181500.0, 2.0], [187900.0, 2.0], [48400.0, 1.0], [49200.0, 1.0], [51600.0, 4.0], [52400.0, 3.0], [54800.0, 4.0], [55600.0, 2.0], [56400.0, 1.0], [65200.0, 1.0], [68000.0, 1.0], [72800.0, 2.0], [71200.0, 5.0], [96800.0, 1.0], [98400.0, 1.0], [101600.0, 1.0], [100000.0, 1.0], [104800.0, 1.0], [103200.0, 3.0], [168000.0, 3.0], [171200.0, 1.0], [174400.0, 2.0], [177600.0, 4.0], [180800.0, 1.0], [187200.0, 3.0], [203200.0, 1.0], [165700.0, 1.0], [168900.0, 1.0], [172100.0, 3.0], [178500.0, 3.0], [204100.0, 1.0], [69500.0, 1.0], [71100.0, 3.0], [72700.0, 1.0], [98300.0, 1.0], [101500.0, 1.0], [99900.0, 1.0], [103100.0, 4.0], [104700.0, 1.0], [166600.0, 1.0], [169800.0, 1.0], [173000.0, 2.0], [176200.0, 3.0], [185800.0, 1.0], [208200.0, 1.0], [34300.0, 1.0], [33500.0, 1.0], [35900.0, 1.0], [36700.0, 1.0], [35100.0, 1.0], [37500.0, 4.0], [38300.0, 1.0], [39900.0, 5.0], [40700.0, 1.0], [39100.0, 2.0], [42300.0, 1.0], [170700.0, 3.0], [167500.0, 2.0], [43100.0, 2.0], [44700.0, 2.0], [43900.0, 4.0], [177100.0, 2.0], [46300.0, 1.0], [47100.0, 2.0], [180300.0, 3.0], [186700.0, 2.0], [48700.0, 3.0], [51100.0, 1.0], [49500.0, 1.0], [202700.0, 1.0], [51900.0, 3.0], [52700.0, 2.0], [55100.0, 3.0], [53500.0, 1.0], [55900.0, 2.0], [56700.0, 1.0], [71800.0, 5.0], [70200.0, 3.0], [97400.0, 1.0], [102200.0, 2.0], [100600.0, 3.0], [103800.0, 4.0], [171600.0, 1.0], [168400.0, 2.0], [178000.0, 2.0], [181200.0, 2.0], [184400.0, 1.0], [172500.0, 3.0], [178900.0, 2.0], [182100.0, 1.0], [188500.0, 3.0], [69300.0, 1.0], [66100.0, 2.0], [72500.0, 2.0], [74100.0, 1.0], [98100.0, 1.0], [101300.0, 1.0], [104500.0, 4.0], [102900.0, 1.0], [167000.0, 3.0], [170200.0, 3.0], [173400.0, 6.0], [176600.0, 2.0], [32700.0, 1.0], [31900.0, 1.0], [33400.0, 1.0], [35800.0, 2.0], [37400.0, 2.0], [39800.0, 6.0], [39000.0, 5.0], [40600.0, 1.0], [43000.0, 3.0], [42200.0, 2.0], [171100.0, 2.0], [167900.0, 1.0], [43800.0, 1.0], [44600.0, 2.0], [174300.0, 2.0], [177500.0, 1.0], [45400.0, 1.0], [46200.0, 1.0], [47800.0, 1.0], [48600.0, 1.0], [49400.0, 2.0], [50200.0, 1.0], [51800.0, 3.0], [52600.0, 3.0], [55000.0, 8.0], [53400.0, 1.0], [56600.0, 1.0], [55800.0, 2.0], [64600.0, 1.0], [65400.0, 1.0], [66800.0, 1.0], [71600.0, 6.0], [73200.0, 1.0], [70000.0, 1.0], [97200.0, 2.0], [102000.0, 2.0], [98800.0, 1.0], [103600.0, 5.0], [105200.0, 2.0]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 208200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.368421052631577, "minX": 1.71994332E12, "maxY": 746.0000000000001, "series": [{"data": [[1.71994338E12, 420.29268292682923], [1.71994344E12, 190.65191740413007], [1.71994332E12, 746.0000000000001], [1.7199435E12, 10.368421052631577]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7199435E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 31481.0, "minX": 2.0, "maxY": 207470.33333333334, "series": [{"data": [[2.0, 204559.0], [3.0, 203542.0], [4.0, 205888.0], [6.0, 202970.0], [7.0, 202010.0], [9.0, 203668.5], [11.0, 202896.0], [12.0, 202510.0], [13.0, 201198.0], [14.0, 205544.0], [15.0, 203283.0], [16.0, 202738.0], [19.0, 207470.33333333334], [20.0, 187740.0], [21.0, 186041.0], [22.0, 189208.0], [23.0, 186417.0], [24.0, 188515.0], [25.0, 187960.0], [26.0, 184675.0], [27.0, 186137.0], [31.0, 188199.0], [33.0, 186255.5], [35.0, 187523.0], [34.0, 187757.0], [37.0, 186458.0], [36.0, 187222.0], [38.0, 184892.0], [41.0, 187361.0], [40.0, 185445.5], [43.0, 188472.0], [42.0, 184801.0], [45.0, 188276.0], [44.0, 187268.0], [46.0, 185794.0], [49.0, 186940.0], [48.0, 188106.5], [51.0, 187573.0], [50.0, 185589.0], [52.0, 186869.0], [57.0, 188854.2], [61.0, 186709.0], [63.0, 188877.0], [62.0, 187939.0], [67.0, 189153.0], [66.0, 187248.0], [65.0, 186747.0], [64.0, 186572.0], [71.0, 178855.0], [70.0, 178383.0], [69.0, 190904.0], [68.0, 185479.0], [75.0, 180028.0], [74.0, 178100.5], [72.0, 179217.0], [79.0, 177630.0], [78.0, 181559.0], [77.0, 180483.0], [76.0, 176741.0], [83.0, 177683.5], [81.0, 177960.5], [84.0, 177837.0], [95.0, 181674.0], [94.0, 181349.0], [93.0, 179631.0], [92.0, 178257.625], [99.0, 182860.0], [98.0, 182128.0], [97.0, 183815.0], [103.0, 182514.5], [107.0, 180331.66666666666], [119.0, 181830.53846153847], [123.0, 176249.0], [122.0, 174169.0], [121.0, 174983.0], [120.0, 172711.0], [126.0, 175254.0], [125.0, 176926.0], [124.0, 177331.0], [135.0, 173598.0], [134.0, 175903.0], [133.0, 174460.4], [143.0, 178238.0], [142.0, 176659.0], [141.0, 173547.0], [140.0, 173413.66666666666], [139.0, 173579.0], [138.0, 173303.0], [137.0, 172118.0], [136.0, 172283.0], [151.0, 177268.0], [150.0, 175650.5], [148.0, 177803.0], [147.0, 176320.0], [146.0, 178019.0], [145.0, 179981.0], [144.0, 178626.0], [159.0, 178751.66666666666], [156.0, 178001.25], [152.0, 177640.0], [167.0, 176047.0], [166.0, 174970.0], [165.0, 176142.0], [164.0, 178046.0], [163.0, 177695.5], [161.0, 178082.5], [175.0, 171228.33333333334], [172.0, 170550.0], [171.0, 170381.0], [170.0, 170202.0], [169.0, 172354.0], [168.0, 179991.0], [183.0, 174889.5], [181.0, 174502.0], [180.0, 170505.0], [176.0, 174618.0], [191.0, 176811.0], [190.0, 175504.33333333334], [188.0, 174411.0], [186.0, 176984.0], [185.0, 174485.0], [184.0, 173241.0], [199.0, 170425.0], [198.0, 169272.5], [196.0, 169476.0], [195.0, 171729.0], [194.0, 168893.0], [193.0, 169544.0], [192.0, 170926.0], [207.0, 175102.0], [206.0, 170878.0], [205.0, 172494.0], [204.0, 174636.0], [203.0, 177198.0], [202.0, 175234.0], [201.0, 170766.0], [200.0, 171008.0], [215.0, 177221.0], [214.0, 176228.0], [213.0, 175205.0], [212.0, 172899.0], [211.0, 174044.0], [210.0, 172949.0], [208.0, 173601.0], [222.0, 169772.8333333333], [216.0, 173346.0], [228.0, 169041.16666666666], [239.0, 174599.0], [238.0, 173934.5], [236.0, 175101.0], [235.0, 172219.0], [234.0, 175660.0], [233.0, 173684.8], [247.0, 167066.0], [246.0, 167001.0], [245.0, 168620.0], [244.0, 167313.0], [243.0, 168711.0], [242.0, 167503.0], [241.0, 176117.0], [240.0, 172399.0], [255.0, 167171.0], [254.0, 168642.25], [250.0, 170170.0], [249.0, 171359.0], [248.0, 168041.0], [270.0, 168997.0], [269.0, 167780.33333333334], [266.0, 168689.0], [265.0, 170183.0], [264.0, 173456.0], [263.0, 172822.24999999997], [280.0, 171816.0], [279.0, 169069.0], [278.0, 171774.0], [277.0, 172530.33333333334], [274.0, 170775.0], [273.0, 167455.0], [302.0, 167709.0], [297.0, 167929.0], [295.0, 166068.0], [294.0, 167785.0], [293.0, 170295.0], [292.0, 165324.0], [291.0, 167816.0], [290.0, 172227.49999999997], [315.0, 170557.0], [311.0, 164654.0], [310.0, 168592.0], [309.0, 165368.0], [308.0, 167907.0], [307.0, 169188.0], [305.0, 168025.0], [304.0, 165654.5], [334.0, 170623.66666666666], [329.0, 169706.0], [321.0, 169465.0], [342.0, 166805.0], [341.0, 170402.0], [340.0, 169723.62499999997], [367.0, 99190.0], [365.0, 101371.5], [363.0, 102297.0], [362.0, 105367.0], [361.0, 99328.0], [360.0, 98893.0], [359.0, 101094.0], [358.0, 172363.0], [356.0, 173387.42857142855], [382.0, 100414.0], [383.0, 103453.0], [380.0, 100606.0], [371.0, 100185.0], [370.0, 105246.0], [369.0, 107841.0], [368.0, 98307.0], [379.0, 104151.0], [378.0, 104363.0], [377.0, 97781.0], [376.0, 99336.0], [375.0, 100218.0], [374.0, 100724.0], [373.0, 99174.0], [372.0, 100241.0], [396.0, 102235.0], [399.0, 100205.0], [398.0, 101022.0], [397.0, 100715.0], [395.0, 101738.25], [391.0, 101840.0], [385.0, 100609.0], [384.0, 100011.0], [387.0, 101017.0], [386.0, 99895.0], [390.0, 100853.0], [389.0, 106027.0], [388.0, 99997.0], [413.0, 100574.0], [415.0, 98202.5], [412.0, 98246.0], [403.0, 101471.0], [402.0, 97244.0], [401.0, 101191.0], [400.0, 97936.0], [411.0, 103877.0], [410.0, 102038.0], [409.0, 96671.0], [408.0, 104311.0], [406.0, 103887.0], [405.0, 102107.0], [404.0, 101463.0], [430.0, 103511.0], [431.0, 103763.0], [429.0, 103458.0], [428.0, 104778.0], [427.0, 104201.0], [426.0, 101371.0], [425.0, 101583.0], [424.0, 101918.0], [423.0, 98124.0], [417.0, 106004.0], [416.0, 103852.0], [419.0, 101610.0], [418.0, 97889.0], [422.0, 97581.0], [421.0, 99758.0], [445.0, 97743.0], [446.0, 97548.0], [444.0, 103030.0], [435.0, 97303.0], [434.0, 101278.0], [433.0, 103631.0], [432.0, 103986.0], [443.0, 98540.0], [442.0, 98432.0], [441.0, 104582.0], [440.0, 97594.0], [439.0, 103180.0], [437.0, 96889.0], [436.0, 103311.0], [451.0, 104681.0], [462.0, 104220.0], [460.0, 104506.0], [459.0, 104146.5], [457.0, 103786.0], [456.0, 103643.0], [454.0, 103663.0], [453.0, 103915.0], [450.0, 104067.0], [449.0, 104297.0], [448.0, 103599.5], [478.0, 104156.75], [474.0, 103573.0], [472.0, 103614.25], [468.0, 104830.0], [466.0, 103225.0], [465.0, 104220.33333333333], [493.0, 66965.0], [495.0, 68852.0], [492.0, 71085.0], [483.0, 70265.0], [482.0, 67128.0], [481.0, 103671.0], [480.0, 102163.0], [491.0, 71181.0], [490.0, 70405.0], [489.0, 66829.0], [488.0, 66143.0], [487.0, 68719.0], [486.0, 74097.0], [485.0, 71700.0], [484.0, 71804.0], [510.0, 69298.0], [511.0, 70098.0], [509.0, 70166.5], [499.0, 68501.0], [498.0, 66953.0], [497.0, 67827.0], [507.0, 68910.0], [506.0, 68806.0], [505.0, 67375.0], [504.0, 68365.0], [503.0, 72314.0], [502.0, 71406.0], [501.0, 73523.0], [500.0, 72092.0], [538.0, 70945.0], [542.0, 69064.0], [543.0, 71275.0], [528.0, 68787.0], [530.0, 69142.0], [529.0, 71907.0], [541.0, 65740.0], [540.0, 65434.0], [539.0, 71236.0], [527.0, 72033.5], [513.0, 68952.0], [512.0, 66250.0], [515.0, 74134.0], [514.0, 72212.0], [517.0, 74048.0], [516.0, 74081.0], [519.0, 68039.0], [518.0, 69080.0], [525.0, 72929.0], [524.0, 69899.33333333333], [521.0, 69027.5], [535.0, 71929.0], [534.0, 71877.0], [532.0, 65219.0], [531.0, 69056.0], [573.0, 68001.0], [575.0, 71387.0], [571.0, 71311.5], [569.0, 72322.0], [562.0, 71200.0], [561.0, 73205.0], [560.0, 69279.0], [558.0, 68423.0], [545.0, 71947.5], [547.0, 68516.0], [546.0, 64601.0], [550.0, 68890.0], [549.0, 67515.0], [554.0, 71804.0], [552.0, 69728.0], [604.0, 53623.0], [607.0, 53484.0], [596.0, 70527.0], [606.0, 53899.0], [605.0, 50624.0], [603.0, 50247.0], [602.0, 72815.0], [601.0, 72817.0], [600.0, 72920.0], [591.0, 71599.0], [579.0, 72298.0], [576.0, 71362.0], [583.0, 71435.5], [581.0, 71735.25], [589.0, 71758.33333333333], [586.0, 71319.0], [584.0, 70283.0], [599.0, 72228.0], [598.0, 71494.0], [633.0, 54815.0], [637.0, 52046.0], [638.0, 52707.0], [625.0, 50601.0], [624.0, 51524.0], [627.0, 54922.0], [626.0, 54675.0], [629.0, 52070.0], [628.0, 51290.0], [636.0, 52657.0], [635.0, 55095.0], [634.0, 55180.0], [632.0, 52288.0], [615.0, 52279.0], [614.0, 53765.0], [613.0, 49704.0], [612.0, 49466.0], [611.0, 50702.0], [610.0, 56804.0], [608.0, 54186.0], [623.0, 51752.0], [622.0, 55353.5], [620.0, 55031.0], [619.0, 54688.0], [618.0, 54632.0], [617.0, 51270.0], [616.0, 51534.0], [631.0, 54923.0], [630.0, 52758.0], [666.0, 54261.5], [670.0, 52109.0], [671.0, 48013.0], [657.0, 52961.0], [656.0, 52414.0], [659.0, 53372.0], [658.0, 48934.0], [661.0, 56478.0], [660.0, 48522.0], [669.0, 54911.0], [668.0, 53557.0], [667.0, 56114.0], [664.0, 54531.0], [647.0, 51226.0], [646.0, 55026.0], [645.0, 51557.0], [644.0, 55373.0], [643.0, 52101.0], [641.0, 52421.0], [640.0, 52017.0], [655.0, 52949.0], [654.0, 50577.5], [652.0, 48327.0], [651.0, 55542.0], [650.0, 55656.0], [649.0, 51316.0], [648.0, 54815.0], [663.0, 49170.0], [662.0, 54825.0], [696.0, 55639.0], [691.0, 55614.0], [702.0, 55485.0], [700.0, 55557.0], [699.0, 54001.666666666664], [687.0, 55025.0], [673.0, 51696.0], [672.0, 55001.0], [676.0, 48757.0], [675.0, 50531.5], [679.0, 55105.0], [677.0, 55173.0], [686.0, 54727.0], [685.0, 55737.0], [684.0, 55737.0], [683.0, 55851.0], [682.0, 55779.0], [681.0, 49405.0], [680.0, 55126.0], [695.0, 55026.0], [694.0, 54181.0], [693.0, 55168.0], [688.0, 56710.0], [728.0, 48995.0], [732.0, 49583.0], [735.0, 48570.0], [721.0, 55789.0], [720.0, 48611.0], [724.0, 49831.0], [723.0, 48714.0], [734.0, 51848.0], [733.0, 52151.0], [731.0, 49898.0], [730.0, 52921.0], [729.0, 52023.0], [719.0, 54966.0], [704.0, 55147.5], [706.0, 55985.0], [705.0, 54706.0], [709.0, 52921.0], [708.0, 55710.5], [711.0, 54993.0], [710.0, 55933.0], [717.0, 52131.0], [716.0, 52721.5], [712.0, 56538.0], [727.0, 50666.5], [725.0, 52649.0], [764.0, 43048.0], [767.0, 42229.0], [752.0, 51210.0], [754.0, 51353.0], [753.0, 48422.0], [757.0, 51664.0], [755.0, 49111.0], [766.0, 41963.0], [765.0, 42983.0], [763.0, 41795.0], [762.0, 43948.0], [761.0, 44908.0], [760.0, 48986.0], [751.0, 48866.0], [738.0, 50790.0], [736.0, 52501.0], [741.0, 51062.5], [739.0, 49791.0], [750.0, 51934.0], [749.0, 52368.0], [748.0, 52553.0], [747.0, 49396.0], [746.0, 51944.0], [745.0, 51029.5], [759.0, 52045.0], [758.0, 51470.5], [794.0, 43579.5], [798.0, 45293.0], [799.0, 40721.0], [784.0, 47571.0], [786.0, 43993.0], [785.0, 47104.0], [789.0, 46789.0], [788.0, 39787.5], [797.0, 44699.0], [796.0, 46178.0], [795.0, 46832.0], [792.0, 40943.0], [775.0, 43012.0], [774.0, 44544.0], [773.0, 41937.0], [772.0, 46463.0], [771.0, 42496.0], [770.0, 42892.0], [769.0, 42662.0], [768.0, 41248.0], [783.0, 48207.0], [782.0, 48312.0], [781.0, 46421.0], [780.0, 43786.0], [779.0, 40115.0], [778.0, 45236.0], [777.0, 47353.0], [776.0, 45795.0], [791.0, 43909.0], [790.0, 47862.0], [824.0, 41923.0], [828.0, 37322.0], [831.0, 37723.0], [817.0, 44128.0], [816.0, 45929.0], [819.0, 40885.0], [818.0, 45464.0], [830.0, 40629.0], [829.0, 41722.0], [827.0, 44029.0], [826.0, 41710.0], [825.0, 43850.0], [815.0, 44004.0], [801.0, 46716.0], [800.0, 46588.0], [803.0, 46252.0], [802.0, 41720.0], [805.0, 46380.0], [804.0, 47131.0], [807.0, 40472.0], [806.0, 44663.0], [814.0, 46739.0], [813.0, 40279.0], [812.0, 47470.0], [811.0, 41245.0], [810.0, 43574.0], [809.0, 44109.0], [808.0, 40954.0], [821.0, 41225.0], [820.0, 40174.0], [856.0, 42062.0], [860.0, 35184.0], [863.0, 40139.0], [850.0, 36295.0], [849.0, 43096.5], [852.0, 39522.0], [851.0, 42231.0], [862.0, 39134.0], [861.0, 37316.0], [859.0, 43146.0], [858.0, 43115.0], [857.0, 39287.0], [847.0, 42885.0], [832.0, 44771.0], [834.0, 42304.0], [833.0, 37583.0], [837.0, 38638.5], [835.0, 43416.0], [839.0, 38018.0], [838.0, 42675.0], [846.0, 36767.0], [845.0, 39936.0], [844.0, 42838.0], [843.0, 44077.0], [842.0, 40403.0], [841.0, 38579.0], [840.0, 42791.0], [854.0, 44729.0], [853.0, 39776.0], [890.0, 39107.5], [894.0, 39803.0], [895.0, 40259.0], [883.0, 37796.0], [881.0, 38470.0], [885.0, 39262.0], [884.0, 35886.0], [893.0, 33579.0], [892.0, 38749.0], [891.0, 37916.0], [888.0, 38790.0], [871.0, 35857.0], [870.0, 35699.0], [869.0, 40113.0], [868.0, 39719.0], [867.0, 35727.0], [866.0, 36535.0], [865.0, 42612.0], [864.0, 40099.0], [879.0, 37512.0], [878.0, 42141.0], [877.0, 38571.0], [876.0, 37967.0], [874.0, 36486.0], [872.0, 36287.0], [887.0, 35450.0], [886.0, 38586.0], [926.0, 35960.0], [916.0, 37529.0], [927.0, 38560.0], [913.0, 37180.0], [912.0, 37546.0], [923.0, 35290.0], [922.0, 31481.0], [921.0, 37296.0], [903.0, 39427.0], [902.0, 37806.0], [901.0, 38985.0], [900.0, 34379.0], [899.0, 38322.0], [898.0, 39644.0], [897.0, 33221.0], [896.0, 35305.0], [911.0, 36432.0], [910.0, 32984.0], [909.0, 33617.0], [908.0, 33410.0], [907.0, 33920.0], [906.0, 31960.0], [905.0, 33862.5], [919.0, 35306.0], [918.0, 34553.0], [917.0, 38520.0], [915.0, 34001.0], [914.0, 37405.0], [929.0, 32411.0], [928.0, 32808.0], [981.0, 37488.0], [1000.0, 38297.857142857145]], "isOverall": false, "label": "register", "isController": false}, {"data": [[503.6980000000003, 102340.30799999999]], "isOverall": false, "label": "register-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 121.28333333333333, "minX": 1.71994332E12, "maxY": 12052.383333333333, "series": [{"data": [[1.71994338E12, 2856.3166666666666], [1.71994344E12, 7802.066666666667], [1.71994332E12, 12052.383333333333], [1.7199435E12, 440.06666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71994338E12, 784.8166666666667], [1.71994344E12, 2163.516666666667], [1.71994332E12, 3310.15], [1.7199435E12, 121.28333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7199435E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 50893.6050096339, "minX": 1.71994332E12, "maxY": 204069.00000000003, "series": [{"data": [[1.71994338E12, 101942.0650406504], [1.71994344E12, 175546.7315634218], [1.71994332E12, 50893.6050096339], [1.7199435E12, 204069.00000000003]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7199435E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 50893.59537572251, "minX": 1.71994332E12, "maxY": 204068.94736842104, "series": [{"data": [[1.71994338E12, 101942.03252032519], [1.71994344E12, 175546.71091445425], [1.71994332E12, 50893.59537572251], [1.7199435E12, 204068.94736842104]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7199435E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 16.473684210526315, "minX": 1.71994332E12, "maxY": 17.894308943089435, "series": [{"data": [[1.71994338E12, 17.894308943089435], [1.71994344E12, 17.06489675516225], [1.71994332E12, 17.22543352601154], [1.7199435E12, 16.473684210526315]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7199435E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 29824.0, "minX": 1.71994332E12, "maxY": 208205.0, "series": [{"data": [[1.71994338E12, 107841.0], [1.71994344E12, 190904.0], [1.71994332E12, 74134.0], [1.7199435E12, 208205.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71994338E12, 96671.0], [1.71994344E12, 164654.0], [1.71994332E12, 29824.0], [1.7199435E12, 201198.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71994338E12, 104545.8], [1.71994344E12, 186747.0], [1.71994332E12, 71396.0], [1.7199435E12, 207275.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71994338E12, 107405.64000000001], [1.71994344E12, 189592.6], [1.71994332E12, 73459.39999999998], [1.7199435E12, 208205.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71994338E12, 102297.0], [1.71994344E12, 173745.0], [1.71994332E12, 49170.0], [1.7199435E12, 203542.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71994338E12, 105280.4], [1.71994344E12, 187960.0], [1.71994332E12, 72092.0], [1.7199435E12, 208205.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7199435E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 36768.0, "minX": 1.0, "maxY": 207275.0, "series": [{"data": [[34.0, 101067.5], [37.0, 103926.0], [11.0, 51210.0], [45.0, 187361.0], [12.0, 38769.5], [49.0, 176659.0], [3.0, 207275.0], [50.0, 174831.5], [13.0, 39274.5], [53.0, 71574.0], [58.0, 55013.0], [15.0, 42892.0], [16.0, 45828.5], [1.0, 44908.0], [17.0, 36768.0], [72.0, 39488.5], [18.0, 46053.5], [5.0, 187740.0], [22.0, 69245.0], [23.0, 72092.0], [24.0, 111645.0], [25.0, 169023.0], [27.0, 101918.0], [28.0, 51732.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 72.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 36768.0, "minX": 1.0, "maxY": 207275.0, "series": [{"data": [[34.0, 101067.5], [37.0, 103926.0], [11.0, 51210.0], [45.0, 187361.0], [12.0, 38769.5], [49.0, 176659.0], [3.0, 207275.0], [50.0, 174831.5], [13.0, 39274.5], [53.0, 71574.0], [58.0, 55013.0], [15.0, 42892.0], [16.0, 45828.5], [1.0, 44908.0], [17.0, 36768.0], [72.0, 39488.5], [18.0, 46053.0], [5.0, 187740.0], [22.0, 69245.0], [23.0, 72092.0], [24.0, 111645.0], [25.0, 169023.0], [27.0, 101918.0], [28.0, 51732.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 72.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.71994326E12, "maxY": 16.666666666666668, "series": [{"data": [[1.71994326E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71994326E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.71994332E12, "maxY": 8.65, "series": [{"data": [[1.71994338E12, 2.05], [1.71994344E12, 5.65], [1.71994332E12, 8.65], [1.7199435E12, 0.31666666666666665]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7199435E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.71994332E12, "maxY": 8.65, "series": [{"data": [[1.71994338E12, 2.05], [1.71994344E12, 5.65], [1.71994332E12, 8.65], [1.7199435E12, 0.31666666666666665]], "isOverall": false, "label": "register-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7199435E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.71994332E12, "maxY": 8.65, "series": [{"data": [[1.71994338E12, 2.05], [1.71994344E12, 5.65], [1.71994332E12, 8.65], [1.7199435E12, 0.31666666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7199435E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

