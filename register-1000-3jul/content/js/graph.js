/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 30577.0, "minX": 0.0, "maxY": 180272.0, "series": [{"data": [[0.0, 30577.0], [0.1, 31942.0], [0.2, 32100.0], [0.3, 32100.0], [0.4, 32128.0], [0.5, 32696.0], [0.6, 32733.0], [0.7, 32895.0], [0.8, 33060.0], [0.9, 33254.0], [1.0, 33375.0], [1.1, 33600.0], [1.2, 33796.0], [1.3, 33916.0], [1.4, 33916.0], [1.5, 33997.0], [1.6, 34506.0], [1.7, 34808.0], [1.8, 35003.0], [1.9, 35235.0], [2.0, 35260.0], [2.1, 35310.0], [2.2, 35369.0], [2.3, 35459.0], [2.4, 35497.0], [2.5, 35865.0], [2.6, 35930.0], [2.7, 35960.0], [2.8, 36039.0], [2.9, 36045.0], [3.0, 36116.0], [3.1, 36267.0], [3.2, 36392.0], [3.3, 36614.0], [3.4, 36866.0], [3.5, 37139.0], [3.6, 37140.0], [3.7, 37216.0], [3.8, 37279.0], [3.9, 37297.0], [4.0, 37381.0], [4.1, 37593.0], [4.2, 37690.0], [4.3, 37734.0], [4.4, 37789.0], [4.5, 37852.0], [4.6, 37925.0], [4.7, 37977.0], [4.8, 38028.0], [4.9, 38238.0], [5.0, 38428.0], [5.1, 38470.0], [5.2, 38486.0], [5.3, 38694.0], [5.4, 38788.0], [5.5, 38820.0], [5.6, 38831.0], [5.7, 38874.0], [5.8, 38877.0], [5.9, 38917.0], [6.0, 38918.0], [6.1, 38956.0], [6.2, 38956.0], [6.3, 38993.0], [6.4, 39013.0], [6.5, 39039.0], [6.6, 39111.0], [6.7, 39137.0], [6.8, 39168.0], [6.9, 39195.0], [7.0, 39264.0], [7.1, 39284.0], [7.2, 39354.0], [7.3, 39373.0], [7.4, 39388.0], [7.5, 39395.0], [7.6, 39396.0], [7.7, 39416.0], [7.8, 39427.0], [7.9, 39427.0], [8.0, 39432.0], [8.1, 39450.0], [8.2, 39458.0], [8.3, 39465.0], [8.4, 39468.0], [8.5, 39474.0], [8.6, 39476.0], [8.7, 39499.0], [8.8, 39505.0], [8.9, 39525.0], [9.0, 39533.0], [9.1, 39542.0], [9.2, 39542.0], [9.3, 39566.0], [9.4, 39577.0], [9.5, 39584.0], [9.6, 39595.0], [9.7, 39597.0], [9.8, 39601.0], [9.9, 39613.0], [10.0, 39614.0], [10.1, 39624.0], [10.2, 39625.0], [10.3, 39641.0], [10.4, 39646.0], [10.5, 39661.0], [10.6, 39676.0], [10.7, 39678.0], [10.8, 39682.0], [10.9, 39684.0], [11.0, 39690.0], [11.1, 39695.0], [11.2, 39708.0], [11.3, 39710.0], [11.4, 39712.0], [11.5, 39718.0], [11.6, 39718.0], [11.7, 39747.0], [11.8, 39749.0], [11.9, 39766.0], [12.0, 39775.0], [12.1, 39778.0], [12.2, 39781.0], [12.3, 39786.0], [12.4, 39799.0], [12.5, 39803.0], [12.6, 39808.0], [12.7, 39809.0], [12.8, 39814.0], [12.9, 39815.0], [13.0, 39816.0], [13.1, 39818.0], [13.2, 39820.0], [13.3, 39820.0], [13.4, 39830.0], [13.5, 39833.0], [13.6, 39845.0], [13.7, 39846.0], [13.8, 39870.0], [13.9, 39882.0], [14.0, 39889.0], [14.1, 39898.0], [14.2, 39904.0], [14.3, 39974.0], [14.4, 40086.0], [14.5, 40106.0], [14.6, 40209.0], [14.7, 40232.0], [14.8, 40245.0], [14.9, 40258.0], [15.0, 40340.0], [15.1, 40471.0], [15.2, 40494.0], [15.3, 40511.0], [15.4, 40602.0], [15.5, 40646.0], [15.6, 40787.0], [15.7, 40807.0], [15.8, 40860.0], [15.9, 40888.0], [16.0, 41020.0], [16.1, 41164.0], [16.2, 41167.0], [16.3, 41200.0], [16.4, 41230.0], [16.5, 41363.0], [16.6, 41426.0], [16.7, 41561.0], [16.8, 41835.0], [16.9, 42070.0], [17.0, 42099.0], [17.1, 42155.0], [17.2, 42233.0], [17.3, 42335.0], [17.4, 42372.0], [17.5, 42532.0], [17.6, 42592.0], [17.7, 42897.0], [17.8, 42917.0], [17.9, 42972.0], [18.0, 42985.0], [18.1, 43004.0], [18.2, 43013.0], [18.3, 43151.0], [18.4, 43248.0], [18.5, 43302.0], [18.6, 43346.0], [18.7, 43418.0], [18.8, 43481.0], [18.9, 43481.0], [19.0, 43592.0], [19.1, 43661.0], [19.2, 43685.0], [19.3, 43782.0], [19.4, 43870.0], [19.5, 44050.0], [19.6, 44205.0], [19.7, 44207.0], [19.8, 44278.0], [19.9, 44341.0], [20.0, 44342.0], [20.1, 44367.0], [20.2, 44394.0], [20.3, 44526.0], [20.4, 44565.0], [20.5, 44832.0], [20.6, 44974.0], [20.7, 45185.0], [20.8, 45279.0], [20.9, 45503.0], [21.0, 45714.0], [21.1, 45773.0], [21.2, 45833.0], [21.3, 45858.0], [21.4, 46049.0], [21.5, 46130.0], [21.6, 46341.0], [21.7, 46431.0], [21.8, 46446.0], [21.9, 46494.0], [22.0, 46664.0], [22.1, 46720.0], [22.2, 46741.0], [22.3, 46773.0], [22.4, 46985.0], [22.5, 47066.0], [22.6, 47127.0], [22.7, 47144.0], [22.8, 47248.0], [22.9, 47587.0], [23.0, 47611.0], [23.1, 47710.0], [23.2, 47712.0], [23.3, 47920.0], [23.4, 48019.0], [23.5, 48031.0], [23.6, 48070.0], [23.7, 48195.0], [23.8, 48210.0], [23.9, 48218.0], [24.0, 48241.0], [24.1, 48315.0], [24.2, 48339.0], [24.3, 48358.0], [24.4, 48378.0], [24.5, 48391.0], [24.6, 48434.0], [24.7, 48527.0], [24.8, 48592.0], [24.9, 48606.0], [25.0, 48617.0], [25.1, 48630.0], [25.2, 48696.0], [25.3, 48737.0], [25.4, 48749.0], [25.5, 48806.0], [25.6, 48828.0], [25.7, 48839.0], [25.8, 48880.0], [25.9, 48887.0], [26.0, 48895.0], [26.1, 48913.0], [26.2, 48937.0], [26.3, 48949.0], [26.4, 48971.0], [26.5, 48976.0], [26.6, 49016.0], [26.7, 49028.0], [26.8, 49029.0], [26.9, 49058.0], [27.0, 49065.0], [27.1, 49068.0], [27.2, 49092.0], [27.3, 49120.0], [27.4, 49131.0], [27.5, 49166.0], [27.6, 49167.0], [27.7, 49260.0], [27.8, 49323.0], [27.9, 49328.0], [28.0, 49375.0], [28.1, 49384.0], [28.2, 49385.0], [28.3, 49392.0], [28.4, 49468.0], [28.5, 49479.0], [28.6, 49479.0], [28.7, 49494.0], [28.8, 49504.0], [28.9, 49568.0], [29.0, 49588.0], [29.1, 49597.0], [29.2, 49654.0], [29.3, 49769.0], [29.4, 49805.0], [29.5, 49883.0], [29.6, 49889.0], [29.7, 49910.0], [29.8, 49942.0], [29.9, 49968.0], [30.0, 50028.0], [30.1, 50239.0], [30.2, 50451.0], [30.3, 50747.0], [30.4, 50764.0], [30.5, 50892.0], [30.6, 51085.0], [30.7, 51139.0], [30.8, 51180.0], [30.9, 51234.0], [31.0, 51294.0], [31.1, 51334.0], [31.2, 51392.0], [31.3, 51394.0], [31.4, 51424.0], [31.5, 51459.0], [31.6, 51489.0], [31.7, 51500.0], [31.8, 51621.0], [31.9, 51630.0], [32.0, 51653.0], [32.1, 51670.0], [32.2, 51676.0], [32.3, 51706.0], [32.4, 51728.0], [32.5, 51895.0], [32.6, 51916.0], [32.7, 51936.0], [32.8, 51982.0], [32.9, 51985.0], [33.0, 52000.0], [33.1, 52017.0], [33.2, 52035.0], [33.3, 52133.0], [33.4, 52145.0], [33.5, 52253.0], [33.6, 52254.0], [33.7, 52272.0], [33.8, 52275.0], [33.9, 52304.0], [34.0, 52308.0], [34.1, 52311.0], [34.2, 52329.0], [34.3, 52364.0], [34.4, 52384.0], [34.5, 52433.0], [34.6, 52454.0], [34.7, 52461.0], [34.8, 52471.0], [34.9, 52474.0], [35.0, 52540.0], [35.1, 52567.0], [35.2, 52570.0], [35.3, 52586.0], [35.4, 52614.0], [35.5, 52636.0], [35.6, 52644.0], [35.7, 52650.0], [35.8, 52715.0], [35.9, 52791.0], [36.0, 52797.0], [36.1, 52831.0], [36.2, 52856.0], [36.3, 52870.0], [36.4, 52893.0], [36.5, 52900.0], [36.6, 52965.0], [36.7, 53006.0], [36.8, 53053.0], [36.9, 53056.0], [37.0, 53113.0], [37.1, 53125.0], [37.2, 53150.0], [37.3, 53186.0], [37.4, 53248.0], [37.5, 53260.0], [37.6, 53282.0], [37.7, 53293.0], [37.8, 53353.0], [37.9, 53382.0], [38.0, 53412.0], [38.1, 53540.0], [38.2, 53568.0], [38.3, 53577.0], [38.4, 53677.0], [38.5, 53715.0], [38.6, 53747.0], [38.7, 53841.0], [38.8, 53888.0], [38.9, 53932.0], [39.0, 54040.0], [39.1, 54045.0], [39.2, 54051.0], [39.3, 54097.0], [39.4, 54205.0], [39.5, 54299.0], [39.6, 54384.0], [39.7, 54468.0], [39.8, 54669.0], [39.9, 54706.0], [40.0, 54727.0], [40.1, 54808.0], [40.2, 54820.0], [40.3, 55014.0], [40.4, 55048.0], [40.5, 55120.0], [40.6, 55166.0], [40.7, 55196.0], [40.8, 55297.0], [40.9, 55406.0], [41.0, 55447.0], [41.1, 55568.0], [41.2, 55600.0], [41.3, 55697.0], [41.4, 55898.0], [41.5, 55910.0], [41.6, 56070.0], [41.7, 56833.0], [41.8, 56872.0], [41.9, 56960.0], [42.0, 56993.0], [42.1, 57144.0], [42.2, 57556.0], [42.3, 57957.0], [42.4, 58379.0], [42.5, 64079.0], [42.6, 64234.0], [42.7, 64544.0], [42.8, 64699.0], [42.9, 64715.0], [43.0, 64726.0], [43.1, 64732.0], [43.2, 64753.0], [43.3, 64876.0], [43.4, 64891.0], [43.5, 64943.0], [43.6, 64958.0], [43.7, 65015.0], [43.8, 65025.0], [43.9, 65069.0], [44.0, 65147.0], [44.1, 65188.0], [44.2, 65238.0], [44.3, 65244.0], [44.4, 65278.0], [44.5, 65424.0], [44.6, 65435.0], [44.7, 65438.0], [44.8, 65459.0], [44.9, 65466.0], [45.0, 65467.0], [45.1, 65481.0], [45.2, 65484.0], [45.3, 65489.0], [45.4, 65492.0], [45.5, 65540.0], [45.6, 65546.0], [45.7, 65669.0], [45.8, 65737.0], [45.9, 65790.0], [46.0, 65798.0], [46.1, 65846.0], [46.2, 65880.0], [46.3, 65963.0], [46.4, 66185.0], [46.5, 66210.0], [46.6, 66240.0], [46.7, 66325.0], [46.8, 66475.0], [46.9, 66522.0], [47.0, 66612.0], [47.1, 66649.0], [47.2, 66698.0], [47.3, 66701.0], [47.4, 66858.0], [47.5, 67154.0], [47.6, 67666.0], [47.7, 67688.0], [47.8, 67819.0], [47.9, 67859.0], [48.0, 68117.0], [48.1, 68140.0], [48.2, 68326.0], [48.3, 68347.0], [48.4, 68366.0], [48.5, 68449.0], [48.6, 68455.0], [48.7, 68506.0], [48.8, 68517.0], [48.9, 68569.0], [49.0, 68581.0], [49.1, 68637.0], [49.2, 68648.0], [49.3, 68658.0], [49.4, 68685.0], [49.5, 68704.0], [49.6, 68782.0], [49.7, 68810.0], [49.8, 68838.0], [49.9, 68844.0], [50.0, 68873.0], [50.1, 68994.0], [50.2, 68998.0], [50.3, 69035.0], [50.4, 69077.0], [50.5, 69096.0], [50.6, 69124.0], [50.7, 69279.0], [50.8, 69304.0], [50.9, 69307.0], [51.0, 69366.0], [51.1, 69489.0], [51.2, 69507.0], [51.3, 69573.0], [51.4, 69581.0], [51.5, 69617.0], [51.6, 69618.0], [51.7, 69628.0], [51.8, 69649.0], [51.9, 69664.0], [52.0, 69680.0], [52.1, 69687.0], [52.2, 69827.0], [52.3, 69917.0], [52.4, 69952.0], [52.5, 70028.0], [52.6, 70111.0], [52.7, 70207.0], [52.8, 70213.0], [52.9, 70317.0], [53.0, 70345.0], [53.1, 70399.0], [53.2, 70567.0], [53.3, 70598.0], [53.4, 70615.0], [53.5, 70618.0], [53.6, 70631.0], [53.7, 70687.0], [53.8, 70690.0], [53.9, 70693.0], [54.0, 70702.0], [54.1, 70730.0], [54.2, 70843.0], [54.3, 70924.0], [54.4, 70959.0], [54.5, 71148.0], [54.6, 71173.0], [54.7, 71192.0], [54.8, 71193.0], [54.9, 71320.0], [55.0, 71334.0], [55.1, 71394.0], [55.2, 71427.0], [55.3, 71463.0], [55.4, 71497.0], [55.5, 71547.0], [55.6, 71566.0], [55.7, 71599.0], [55.8, 71646.0], [55.9, 71694.0], [56.0, 71720.0], [56.1, 71765.0], [56.2, 71813.0], [56.3, 71860.0], [56.4, 71870.0], [56.5, 71899.0], [56.6, 71987.0], [56.7, 71998.0], [56.8, 72045.0], [56.9, 72241.0], [57.0, 72515.0], [57.1, 72531.0], [57.2, 72685.0], [57.3, 72964.0], [57.4, 73399.0], [57.5, 73924.0], [57.6, 74443.0], [57.7, 74474.0], [57.8, 74647.0], [57.9, 96728.0], [58.0, 97061.0], [58.1, 97080.0], [58.2, 97143.0], [58.3, 97174.0], [58.4, 97230.0], [58.5, 97335.0], [58.6, 97336.0], [58.7, 97440.0], [58.8, 97552.0], [58.9, 97624.0], [59.0, 97640.0], [59.1, 97776.0], [59.2, 97804.0], [59.3, 97921.0], [59.4, 98012.0], [59.5, 98244.0], [59.6, 98545.0], [59.7, 98594.0], [59.8, 98641.0], [59.9, 98724.0], [60.0, 98734.0], [60.1, 99069.0], [60.2, 99129.0], [60.3, 99236.0], [60.4, 99297.0], [60.5, 99299.0], [60.6, 99716.0], [60.7, 99770.0], [60.8, 99802.0], [60.9, 99926.0], [61.0, 100027.0], [61.1, 100084.0], [61.2, 100293.0], [61.3, 100445.0], [61.4, 100507.0], [61.5, 100639.0], [61.6, 100715.0], [61.7, 100802.0], [61.8, 100852.0], [61.9, 100866.0], [62.0, 100872.0], [62.1, 100932.0], [62.2, 100950.0], [62.3, 100970.0], [62.4, 101019.0], [62.5, 101045.0], [62.6, 101048.0], [62.7, 101049.0], [62.8, 101093.0], [62.9, 101095.0], [63.0, 101166.0], [63.1, 101190.0], [63.2, 101201.0], [63.3, 101216.0], [63.4, 101246.0], [63.5, 101266.0], [63.6, 101296.0], [63.7, 101326.0], [63.8, 101357.0], [63.9, 101409.0], [64.0, 101499.0], [64.1, 101512.0], [64.2, 101528.0], [64.3, 101545.0], [64.4, 101604.0], [64.5, 101640.0], [64.6, 101684.0], [64.7, 101701.0], [64.8, 101702.0], [64.9, 101738.0], [65.0, 101751.0], [65.1, 101785.0], [65.2, 101812.0], [65.3, 101824.0], [65.4, 101828.0], [65.5, 101831.0], [65.6, 102160.0], [65.7, 102886.0], [65.8, 102946.0], [65.9, 103058.0], [66.0, 103084.0], [66.1, 103193.0], [66.2, 103251.0], [66.3, 103306.0], [66.4, 103509.0], [66.5, 103541.0], [66.6, 103640.0], [66.7, 103799.0], [66.8, 103834.0], [66.9, 103869.0], [67.0, 104080.0], [67.1, 104135.0], [67.2, 104160.0], [67.3, 104184.0], [67.4, 104198.0], [67.5, 104251.0], [67.6, 104359.0], [67.7, 104662.0], [67.8, 104733.0], [67.9, 104818.0], [68.0, 104907.0], [68.1, 105218.0], [68.2, 105218.0], [68.3, 105386.0], [68.4, 105551.0], [68.5, 105555.0], [68.6, 105639.0], [68.7, 105842.0], [68.8, 105855.0], [68.9, 105939.0], [69.0, 105975.0], [69.1, 105976.0], [69.2, 106016.0], [69.3, 106069.0], [69.4, 106105.0], [69.5, 106146.0], [69.6, 106168.0], [69.7, 106332.0], [69.8, 106586.0], [69.9, 107188.0], [70.0, 107278.0], [70.1, 162526.0], [70.2, 164080.0], [70.3, 164276.0], [70.4, 164413.0], [70.5, 164581.0], [70.6, 164596.0], [70.7, 164612.0], [70.8, 164694.0], [70.9, 164826.0], [71.0, 164949.0], [71.1, 165013.0], [71.2, 165092.0], [71.3, 165322.0], [71.4, 165363.0], [71.5, 165366.0], [71.6, 165404.0], [71.7, 165416.0], [71.8, 165421.0], [71.9, 165639.0], [72.0, 165672.0], [72.1, 165673.0], [72.2, 165763.0], [72.3, 165841.0], [72.4, 165961.0], [72.5, 166043.0], [72.6, 166207.0], [72.7, 166255.0], [72.8, 166264.0], [72.9, 166266.0], [73.0, 166291.0], [73.1, 166318.0], [73.2, 166339.0], [73.3, 166357.0], [73.4, 166366.0], [73.5, 166402.0], [73.6, 166424.0], [73.7, 166429.0], [73.8, 166557.0], [73.9, 166628.0], [74.0, 166665.0], [74.1, 166746.0], [74.2, 166796.0], [74.3, 166817.0], [74.4, 166852.0], [74.5, 166961.0], [74.6, 167096.0], [74.7, 167174.0], [74.8, 167236.0], [74.9, 167239.0], [75.0, 167293.0], [75.1, 167301.0], [75.2, 167354.0], [75.3, 167361.0], [75.4, 167432.0], [75.5, 167444.0], [75.6, 167456.0], [75.7, 167498.0], [75.8, 167522.0], [75.9, 167543.0], [76.0, 167548.0], [76.1, 167588.0], [76.2, 167589.0], [76.3, 167681.0], [76.4, 167829.0], [76.5, 167854.0], [76.6, 167863.0], [76.7, 167893.0], [76.8, 167909.0], [76.9, 167948.0], [77.0, 167948.0], [77.1, 168005.0], [77.2, 168025.0], [77.3, 168025.0], [77.4, 168039.0], [77.5, 168053.0], [77.6, 168064.0], [77.7, 168112.0], [77.8, 168158.0], [77.9, 168271.0], [78.0, 168326.0], [78.1, 168329.0], [78.2, 168373.0], [78.3, 168383.0], [78.4, 168418.0], [78.5, 168445.0], [78.6, 168450.0], [78.7, 168468.0], [78.8, 168487.0], [78.9, 168499.0], [79.0, 168506.0], [79.1, 168527.0], [79.2, 168571.0], [79.3, 168650.0], [79.4, 168699.0], [79.5, 168730.0], [79.6, 168732.0], [79.7, 168736.0], [79.8, 168770.0], [79.9, 168804.0], [80.0, 168888.0], [80.1, 168950.0], [80.2, 168956.0], [80.3, 169052.0], [80.4, 169091.0], [80.5, 169097.0], [80.6, 169111.0], [80.7, 169116.0], [80.8, 169126.0], [80.9, 169136.0], [81.0, 169156.0], [81.1, 169162.0], [81.2, 169174.0], [81.3, 169191.0], [81.4, 169255.0], [81.5, 169352.0], [81.6, 169373.0], [81.7, 169395.0], [81.8, 169466.0], [81.9, 169506.0], [82.0, 169536.0], [82.1, 169622.0], [82.2, 169700.0], [82.3, 169749.0], [82.4, 169756.0], [82.5, 169796.0], [82.6, 169800.0], [82.7, 169809.0], [82.8, 169844.0], [82.9, 169854.0], [83.0, 169854.0], [83.1, 169860.0], [83.2, 169890.0], [83.3, 169981.0], [83.4, 170042.0], [83.5, 170090.0], [83.6, 170091.0], [83.7, 170103.0], [83.8, 170105.0], [83.9, 170124.0], [84.0, 170139.0], [84.1, 170143.0], [84.2, 170302.0], [84.3, 170316.0], [84.4, 170386.0], [84.5, 170452.0], [84.6, 170531.0], [84.7, 170552.0], [84.8, 170553.0], [84.9, 170613.0], [85.0, 170677.0], [85.1, 170698.0], [85.2, 170711.0], [85.3, 170739.0], [85.4, 170798.0], [85.5, 170873.0], [85.6, 170933.0], [85.7, 170937.0], [85.8, 170973.0], [85.9, 171152.0], [86.0, 171160.0], [86.1, 171172.0], [86.2, 171189.0], [86.3, 171214.0], [86.4, 171219.0], [86.5, 171230.0], [86.6, 171248.0], [86.7, 171278.0], [86.8, 171300.0], [86.9, 171305.0], [87.0, 171346.0], [87.1, 171382.0], [87.2, 171401.0], [87.3, 171415.0], [87.4, 171425.0], [87.5, 171466.0], [87.6, 171467.0], [87.7, 171475.0], [87.8, 171504.0], [87.9, 171570.0], [88.0, 171571.0], [88.1, 171594.0], [88.2, 171616.0], [88.3, 171624.0], [88.4, 171673.0], [88.5, 171694.0], [88.6, 171708.0], [88.7, 171739.0], [88.8, 171819.0], [88.9, 171850.0], [89.0, 171856.0], [89.1, 171877.0], [89.2, 171933.0], [89.3, 171936.0], [89.4, 172050.0], [89.5, 172088.0], [89.6, 172121.0], [89.7, 172144.0], [89.8, 172150.0], [89.9, 172170.0], [90.0, 172184.0], [90.1, 172190.0], [90.2, 172266.0], [90.3, 172288.0], [90.4, 172318.0], [90.5, 172323.0], [90.6, 172388.0], [90.7, 172494.0], [90.8, 172621.0], [90.9, 172657.0], [91.0, 172675.0], [91.1, 172681.0], [91.2, 172775.0], [91.3, 172905.0], [91.4, 172906.0], [91.5, 172940.0], [91.6, 173038.0], [91.7, 173237.0], [91.8, 173247.0], [91.9, 173254.0], [92.0, 173333.0], [92.1, 173436.0], [92.2, 173470.0], [92.3, 173529.0], [92.4, 173661.0], [92.5, 173691.0], [92.6, 173702.0], [92.7, 173709.0], [92.8, 173712.0], [92.9, 173773.0], [93.0, 173805.0], [93.1, 173892.0], [93.2, 173983.0], [93.3, 174002.0], [93.4, 174029.0], [93.5, 174030.0], [93.6, 174038.0], [93.7, 174044.0], [93.8, 174048.0], [93.9, 174122.0], [94.0, 174162.0], [94.1, 174200.0], [94.2, 174204.0], [94.3, 174215.0], [94.4, 174217.0], [94.5, 174258.0], [94.6, 174263.0], [94.7, 174282.0], [94.8, 174295.0], [94.9, 174322.0], [95.0, 174337.0], [95.1, 174381.0], [95.2, 174441.0], [95.3, 174490.0], [95.4, 174508.0], [95.5, 174605.0], [95.6, 174608.0], [95.7, 174663.0], [95.8, 174670.0], [95.9, 175016.0], [96.0, 175031.0], [96.1, 175130.0], [96.2, 175134.0], [96.3, 175139.0], [96.4, 175151.0], [96.5, 175153.0], [96.6, 175230.0], [96.7, 175282.0], [96.8, 175344.0], [96.9, 175439.0], [97.0, 175468.0], [97.1, 175722.0], [97.2, 175743.0], [97.3, 175770.0], [97.4, 175793.0], [97.5, 175863.0], [97.6, 176006.0], [97.7, 176045.0], [97.8, 176108.0], [97.9, 176121.0], [98.0, 176164.0], [98.1, 176751.0], [98.2, 176768.0], [98.3, 177045.0], [98.4, 177504.0], [98.5, 177655.0], [98.6, 177995.0], [98.7, 178117.0], [98.8, 178310.0], [98.9, 178328.0], [99.0, 178396.0], [99.1, 178439.0], [99.2, 178456.0], [99.3, 178713.0], [99.4, 178719.0], [99.5, 179404.0], [99.6, 180031.0], [99.7, 180045.0], [99.8, 180119.0], [99.9, 180272.0]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 30500.0, "maxY": 17.0, "series": [{"data": [[164000.0, 1.0], [167200.0, 3.0], [170400.0, 1.0], [173600.0, 2.0], [180000.0, 2.0], [164900.0, 1.0], [168100.0, 2.0], [171300.0, 4.0], [174500.0, 1.0], [68300.0, 3.0], [66700.0, 1.0], [71500.0, 3.0], [69900.0, 2.0], [97100.0, 2.0], [98700.0, 2.0], [103500.0, 2.0], [165800.0, 1.0], [169000.0, 3.0], [172200.0, 2.0], [175400.0, 2.0], [33700.0, 1.0], [34500.0, 1.0], [35300.0, 2.0], [36100.0, 1.0], [37700.0, 3.0], [39300.0, 5.0], [40100.0, 1.0], [42500.0, 2.0], [166700.0, 2.0], [169900.0, 1.0], [43300.0, 2.0], [44900.0, 1.0], [45700.0, 2.0], [48900.0, 5.0], [48100.0, 1.0], [49700.0, 1.0], [52900.0, 2.0], [52100.0, 2.0], [51300.0, 3.0], [53700.0, 2.0], [56900.0, 2.0], [64900.0, 2.0], [65800.0, 2.0], [69000.0, 3.0], [70600.0, 6.0], [72200.0, 1.0], [97800.0, 1.0], [101000.0, 6.0], [105800.0, 2.0], [104200.0, 1.0], [164400.0, 1.0], [167600.0, 1.0], [170800.0, 1.0], [174000.0, 6.0], [165300.0, 3.0], [171700.0, 2.0], [168500.0, 3.0], [178100.0, 1.0], [68100.0, 2.0], [66500.0, 1.0], [71300.0, 3.0], [72900.0, 1.0], [101700.0, 5.0], [98500.0, 2.0], [103300.0, 1.0], [104900.0, 1.0], [106500.0, 1.0], [169400.0, 1.0], [166200.0, 5.0], [172600.0, 4.0], [175800.0, 1.0], [32800.0, 1.0], [33600.0, 1.0], [36000.0, 2.0], [36800.0, 1.0], [35200.0, 2.0], [38400.0, 3.0], [37600.0, 1.0], [39200.0, 2.0], [40800.0, 3.0], [40000.0, 1.0], [170300.0, 3.0], [167100.0, 1.0], [43200.0, 1.0], [44000.0, 1.0], [44800.0, 1.0], [173500.0, 1.0], [176700.0, 2.0], [46400.0, 3.0], [47200.0, 1.0], [48800.0, 6.0], [48000.0, 3.0], [50400.0, 1.0], [49600.0, 1.0], [52800.0, 4.0], [51200.0, 2.0], [52000.0, 3.0], [53600.0, 1.0], [54400.0, 1.0], [55200.0, 1.0], [56000.0, 1.0], [56800.0, 2.0], [64000.0, 1.0], [64800.0, 2.0], [68800.0, 4.0], [65600.0, 1.0], [72000.0, 1.0], [97600.0, 2.0], [100800.0, 4.0], [99200.0, 3.0], [104000.0, 1.0], [105600.0, 1.0], [107200.0, 1.0], [166400.0, 3.0], [169600.0, 1.0], [176000.0, 2.0], [170500.0, 3.0], [167300.0, 3.0], [173700.0, 4.0], [180100.0, 1.0], [68700.0, 2.0], [67100.0, 1.0], [70300.0, 3.0], [71900.0, 2.0], [97500.0, 1.0], [100700.0, 1.0], [99100.0, 1.0], [105500.0, 2.0], [107100.0, 1.0], [165000.0, 2.0], [171400.0, 6.0], [168200.0, 1.0], [174600.0, 4.0], [33900.0, 2.0], [36300.0, 1.0], [38700.0, 1.0], [37100.0, 2.0], [37900.0, 2.0], [39500.0, 10.0], [40300.0, 1.0], [41100.0, 2.0], [169100.0, 8.0], [165900.0, 1.0], [43500.0, 1.0], [44300.0, 4.0], [172300.0, 3.0], [178700.0, 2.0], [46700.0, 3.0], [45100.0, 1.0], [47500.0, 1.0], [49100.0, 4.0], [48300.0, 5.0], [50700.0, 2.0], [49900.0, 3.0], [52300.0, 6.0], [53100.0, 4.0], [51500.0, 1.0], [53900.0, 1.0], [54700.0, 2.0], [55500.0, 1.0], [57100.0, 1.0], [57900.0, 1.0], [65100.0, 2.0], [66200.0, 2.0], [69400.0, 1.0], [67800.0, 2.0], [72600.0, 1.0], [98200.0, 1.0], [101400.0, 2.0], [99800.0, 1.0], [103000.0, 2.0], [104600.0, 1.0], [166800.0, 2.0], [170000.0, 3.0], [173200.0, 3.0], [164500.0, 2.0], [170900.0, 3.0], [174100.0, 2.0], [68500.0, 4.0], [70100.0, 1.0], [71700.0, 2.0], [73300.0, 1.0], [97300.0, 2.0], [102100.0, 1.0], [100500.0, 1.0], [105300.0, 1.0], [103700.0, 1.0], [165400.0, 3.0], [171800.0, 4.0], [168600.0, 2.0], [175000.0, 2.0], [30500.0, 1.0], [32100.0, 3.0], [33000.0, 1.0], [35400.0, 2.0], [36200.0, 1.0], [37800.0, 1.0], [38600.0, 1.0], [39400.0, 11.0], [40200.0, 4.0], [41000.0, 1.0], [41800.0, 1.0], [169500.0, 2.0], [166300.0, 4.0], [43400.0, 2.0], [44200.0, 3.0], [172700.0, 1.0], [45800.0, 2.0], [46600.0, 1.0], [49000.0, 7.0], [48200.0, 3.0], [49800.0, 3.0], [51400.0, 3.0], [53000.0, 3.0], [52200.0, 4.0], [53800.0, 2.0], [54600.0, 1.0], [55400.0, 2.0], [65000.0, 3.0], [64200.0, 1.0], [67600.0, 2.0], [69200.0, 1.0], [70800.0, 1.0], [98000.0, 1.0], [101200.0, 5.0], [102800.0, 1.0], [106000.0, 2.0], [165600.0, 3.0], [172000.0, 2.0], [168800.0, 2.0], [175200.0, 2.0], [178400.0, 2.0], [169700.0, 4.0], [166500.0, 1.0], [172900.0, 3.0], [176100.0, 3.0], [65900.0, 1.0], [69100.0, 1.0], [70700.0, 2.0], [73900.0, 1.0], [97900.0, 1.0], [101100.0, 2.0], [105900.0, 3.0], [104300.0, 1.0], [164200.0, 1.0], [167400.0, 5.0], [170600.0, 3.0], [173800.0, 2.0], [180200.0, 1.0], [177000.0, 1.0], [33300.0, 1.0], [37300.0, 1.0], [38900.0, 5.0], [39700.0, 13.0], [40500.0, 1.0], [41300.0, 1.0], [42900.0, 3.0], [42100.0, 1.0], [168300.0, 4.0], [171500.0, 4.0], [44500.0, 2.0], [43700.0, 1.0], [177900.0, 1.0], [46900.0, 1.0], [46100.0, 1.0], [47700.0, 2.0], [48500.0, 2.0], [49300.0, 6.0], [52500.0, 4.0], [51700.0, 2.0], [53300.0, 2.0], [64500.0, 1.0], [66600.0, 3.0], [69800.0, 1.0], [71400.0, 3.0], [74600.0, 1.0], [97000.0, 2.0], [98600.0, 1.0], [101800.0, 4.0], [100200.0, 1.0], [166000.0, 1.0], [169200.0, 1.0], [172400.0, 1.0], [170100.0, 5.0], [166900.0, 1.0], [173300.0, 1.0], [68900.0, 2.0], [65700.0, 3.0], [70500.0, 2.0], [97700.0, 1.0], [100900.0, 3.0], [104100.0, 4.0], [167800.0, 4.0], [164600.0, 2.0], [174200.0, 8.0], [32600.0, 1.0], [33200.0, 1.0], [34800.0, 1.0], [37200.0, 3.0], [38000.0, 1.0], [38800.0, 4.0], [39600.0, 14.0], [40400.0, 2.0], [42000.0, 2.0], [42800.0, 1.0], [41200.0, 2.0], [168700.0, 4.0], [171900.0, 2.0], [43600.0, 2.0], [175100.0, 5.0], [178300.0, 3.0], [46000.0, 1.0], [45200.0, 1.0], [48400.0, 1.0], [47600.0, 1.0], [50000.0, 1.0], [49200.0, 1.0], [50800.0, 1.0], [52400.0, 5.0], [51600.0, 5.0], [53200.0, 4.0], [54000.0, 4.0], [54800.0, 2.0], [55600.0, 2.0], [65200.0, 3.0], [69600.0, 7.0], [66400.0, 1.0], [74400.0, 2.0], [101600.0, 3.0], [100000.0, 2.0], [104800.0, 1.0], [103200.0, 1.0], [168000.0, 6.0], [164800.0, 1.0], [171200.0, 5.0], [177600.0, 1.0], [174400.0, 2.0], [162500.0, 1.0], [165700.0, 1.0], [168900.0, 2.0], [172100.0, 6.0], [175300.0, 1.0], [66300.0, 1.0], [69500.0, 3.0], [71100.0, 4.0], [96700.0, 1.0], [101500.0, 3.0], [99900.0, 1.0], [104700.0, 1.0], [106300.0, 1.0], [103100.0, 1.0], [169800.0, 7.0], [166600.0, 2.0], [173000.0, 1.0], [179400.0, 1.0], [35900.0, 2.0], [37500.0, 1.0], [39100.0, 4.0], [39900.0, 2.0], [40700.0, 1.0], [42300.0, 2.0], [41500.0, 1.0], [170700.0, 3.0], [167500.0, 5.0], [43100.0, 1.0], [173900.0, 1.0], [45500.0, 1.0], [46300.0, 1.0], [47100.0, 2.0], [48700.0, 2.0], [47900.0, 1.0], [49500.0, 4.0], [51100.0, 2.0], [51900.0, 4.0], [52700.0, 3.0], [53500.0, 3.0], [55100.0, 3.0], [54300.0, 1.0], [55900.0, 1.0], [57500.0, 1.0], [58300.0, 1.0], [64700.0, 4.0], [65500.0, 2.0], [68600.0, 4.0], [70200.0, 2.0], [71800.0, 4.0], [97400.0, 1.0], [100600.0, 1.0], [99000.0, 1.0], [103800.0, 2.0], [168400.0, 6.0], [171600.0, 4.0], [169300.0, 3.0], [175700.0, 4.0], [66100.0, 1.0], [69300.0, 3.0], [70900.0, 2.0], [72500.0, 2.0], [101300.0, 2.0], [99700.0, 2.0], [106100.0, 3.0], [102900.0, 1.0], [167000.0, 1.0], [173400.0, 2.0], [31900.0, 1.0], [32700.0, 1.0], [35800.0, 1.0], [36600.0, 1.0], [35000.0, 1.0], [38200.0, 1.0], [39800.0, 17.0], [39000.0, 2.0], [40600.0, 2.0], [43000.0, 2.0], [41400.0, 1.0], [42200.0, 1.0], [167900.0, 3.0], [171100.0, 4.0], [43800.0, 1.0], [174300.0, 3.0], [177500.0, 1.0], [47000.0, 1.0], [48600.0, 4.0], [49400.0, 4.0], [50200.0, 1.0], [51000.0, 1.0], [51800.0, 1.0], [52600.0, 4.0], [54200.0, 2.0], [55000.0, 2.0], [53400.0, 1.0], [55800.0, 1.0], [65400.0, 10.0], [64600.0, 1.0], [68400.0, 2.0], [66800.0, 1.0], [70000.0, 1.0], [71600.0, 2.0], [97200.0, 1.0], [100400.0, 1.0], [103600.0, 1.0], [105200.0, 2.0]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 180200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 151.6033333333334, "minX": 1.71998196E12, "maxY": 894.3130841121496, "series": [{"data": [[1.71998214E12, 151.6033333333334], [1.71998196E12, 894.3130841121496], [1.71998202E12, 543.8580246913577]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71998214E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 30577.0, "minX": 1.0, "maxY": 180272.0, "series": [{"data": [[2.0, 174508.0], [3.0, 175151.0], [4.0, 175722.0], [5.0, 175770.0], [6.0, 175139.0], [7.0, 175282.0], [9.0, 175130.0], [10.0, 176108.0], [13.0, 175720.33333333334], [14.0, 176006.0], [15.0, 175344.0], [16.0, 173333.0], [17.0, 174258.0], [18.0, 177504.0], [21.0, 178596.33333333334], [22.0, 178719.0], [23.0, 180272.0], [24.0, 180119.0], [25.0, 178439.0], [26.0, 179404.0], [27.0, 178310.0], [29.0, 173531.0], [30.0, 171248.0], [31.0, 172940.0], [33.0, 171278.0], [32.0, 173805.0], [35.0, 173038.0], [34.0, 171466.0], [37.0, 171382.0], [36.0, 174608.0], [38.0, 171571.0], [41.0, 172133.66666666666], [43.0, 180045.0], [42.0, 178117.0], [45.0, 175620.5], [47.0, 176768.0], [46.0, 175793.0], [48.0, 178396.0], [50.0, 175932.0], [53.0, 170933.0], [52.0, 178225.5], [55.0, 171819.0], [54.0, 170873.0], [59.0, 171172.0], [58.0, 172569.66666666666], [61.0, 170452.0], [60.0, 172150.0], [63.0, 171425.0], [62.0, 171300.0], [67.0, 171673.0], [66.0, 172050.0], [65.0, 170882.5], [71.0, 175468.0], [70.0, 171315.33333333334], [75.0, 174337.0], [74.0, 175016.0], [73.0, 173773.0], [72.0, 175130.0], [78.0, 173247.0], [77.0, 177655.0], [76.0, 178328.0], [83.0, 170698.0], [82.0, 169981.0], [81.0, 170282.0], [86.0, 169191.0], [85.0, 171648.0], [91.0, 169097.0], [90.0, 170042.0], [89.0, 171305.0], [88.0, 172180.0], [95.0, 170779.33333333334], [92.0, 171346.0], [98.0, 171504.0], [97.0, 170090.0], [96.0, 169174.0], [103.0, 169890.0], [102.0, 172318.0], [101.0, 175230.0], [100.0, 173755.5], [107.0, 168699.0], [106.0, 169162.0], [105.0, 168385.5], [110.0, 168329.0], [109.0, 170553.0], [108.0, 170937.0], [115.0, 168158.0], [114.0, 169854.0], [113.0, 169966.0], [118.0, 174048.0], [117.0, 173529.0], [116.0, 168770.0], [123.0, 174195.0], [121.0, 172121.0], [120.0, 172160.0], [127.0, 167854.0], [126.0, 172288.0], [125.0, 174295.0], [124.0, 175031.0], [134.0, 167410.0], [133.0, 169802.0], [131.0, 168012.5], [129.0, 167498.0], [128.0, 170139.0], [140.0, 169281.33333333334], [137.0, 169255.0], [136.0, 167601.5], [151.0, 173062.6666666667], [145.0, 172004.4], [159.0, 168776.66666666666], [156.0, 167236.0], [155.0, 168008.0], [153.0, 168112.0], [152.0, 166357.0], [167.0, 167758.0], [165.0, 167863.0], [164.0, 166557.0], [163.0, 167588.0], [162.0, 168373.0], [161.0, 167096.0], [160.0, 167589.0], [171.0, 167824.66666666666], [168.0, 168527.0], [182.0, 171467.0], [181.0, 168039.0], [180.0, 167543.0], [179.0, 166746.0], [178.0, 168956.0], [177.0, 168804.0], [176.0, 168173.2], [191.0, 170739.0], [190.0, 174030.0], [189.0, 171982.5], [187.0, 167893.0], [186.0, 166852.0], [185.0, 167909.0], [184.0, 168510.5], [199.0, 171401.0], [195.0, 169126.0], [194.0, 172388.0], [193.0, 171534.5], [203.0, 172266.0], [202.0, 171620.0], [200.0, 171974.25], [223.0, 167361.0], [222.0, 174041.68421052632], [231.0, 167456.0], [230.0, 166402.0], [229.0, 166291.0], [228.0, 166665.0], [227.0, 166318.0], [226.0, 166264.0], [225.0, 167354.0], [224.0, 166796.0], [237.0, 169661.0], [235.0, 169065.5], [233.0, 169749.0], [232.0, 169136.0], [247.0, 166366.0], [246.0, 166073.2], [241.0, 165013.0], [240.0, 169980.66666666666], [255.0, 165126.5], [253.0, 164694.0], [252.0, 163946.0], [250.0, 165365.0], [269.0, 166339.0], [268.0, 166207.0], [267.0, 165809.0], [265.0, 165841.0], [264.0, 165411.8], [259.0, 164080.0], [258.0, 165718.0], [256.0, 167174.0], [286.0, 169466.0], [287.0, 164612.0], [285.0, 167948.0], [284.0, 168064.0], [283.0, 169911.0], [281.0, 169809.0], [280.0, 169373.0], [279.0, 168499.0], [275.0, 169074.5], [273.0, 165699.75], [278.0, 168383.0], [277.0, 168053.0], [276.0, 168487.0], [301.0, 99299.0], [300.0, 170226.85714285716], [293.0, 169756.0], [292.0, 164276.0], [291.0, 168418.0], [290.0, 169136.0], [288.0, 167829.0], [312.0, 106586.0], [315.0, 99770.0], [314.0, 99716.0], [313.0, 98244.0], [311.0, 106105.0], [305.0, 103058.0], [304.0, 99144.0], [310.0, 104689.0], [308.0, 98724.0], [307.0, 99129.0], [306.0, 99069.0], [332.0, 101075.5], [334.0, 99926.0], [335.0, 106146.0], [333.0, 101831.0], [330.0, 100715.0], [329.0, 101580.0], [327.0, 100027.0], [321.0, 99297.0], [320.0, 100084.2], [323.0, 101701.0], [322.0, 102946.0], [326.0, 105975.0], [325.0, 107188.0], [324.0, 107278.0], [350.0, 104907.0], [351.0, 104359.0], [349.0, 101640.0], [348.0, 105939.0], [347.0, 104983.5], [345.0, 104135.0], [344.0, 100802.0], [343.0, 101809.33333333333], [339.0, 101166.0], [338.0, 101326.0], [337.0, 101246.0], [336.0, 101702.0], [340.0, 106016.0], [365.0, 100530.8], [360.0, 101828.0], [359.0, 103456.0], [357.0, 105551.0], [356.0, 97804.0], [355.0, 106200.5], [353.0, 103193.0], [352.0, 105386.0], [381.0, 102160.0], [383.0, 99573.5], [380.0, 104184.0], [371.0, 100507.0], [370.0, 97552.0], [369.0, 100354.25], [379.0, 104198.0], [378.0, 105639.0], [377.0, 104662.0], [376.0, 105842.0], [375.0, 103251.0], [374.0, 100932.0], [373.0, 100970.0], [372.0, 104733.0], [387.0, 105976.0], [397.0, 101684.0], [399.0, 99134.5], [396.0, 99714.66666666667], [393.0, 100872.0], [392.0, 97776.0], [391.0, 96728.0], [390.0, 101499.0], [389.0, 103437.0], [386.0, 101785.0], [385.0, 101296.0], [384.0, 105218.0], [415.0, 98242.2], [410.0, 103541.0], [409.0, 101266.0], [408.0, 97080.0], [407.0, 100866.0], [401.0, 101528.0], [400.0, 97336.0], [406.0, 103640.0], [405.0, 100852.0], [404.0, 103834.0], [403.0, 104818.0], [402.0, 103306.0], [430.0, 66858.0], [431.0, 66649.0], [429.0, 72273.5], [419.0, 103084.0], [418.0, 101048.0], [417.0, 102886.0], [416.0, 103509.0], [427.0, 71566.0], [426.0, 66698.0], [425.0, 66522.0], [424.0, 66612.0], [423.0, 66701.0], [422.0, 100940.5], [420.0, 101512.0], [444.0, 68984.66666666667], [446.0, 74474.0], [447.0, 67688.0], [445.0, 74443.0], [441.0, 71720.0], [440.0, 68506.0], [439.0, 71813.0], [433.0, 70288.5], [435.0, 68810.0], [434.0, 74647.0], [438.0, 68569.0], [437.0, 68838.0], [436.0, 67154.0], [462.0, 69507.0], [463.0, 64726.0], [461.0, 69628.0], [460.0, 64943.0], [459.0, 69366.0], [458.0, 73924.0], [457.0, 71646.0], [456.0, 69124.0], [455.0, 72045.0], [450.0, 69304.0], [449.0, 67859.0], [448.0, 69617.0], [454.0, 71083.0], [478.0, 71747.5], [479.0, 71427.0], [476.0, 65278.0], [467.0, 69917.0], [466.0, 72964.0], [465.0, 71899.0], [464.0, 72531.0], [475.0, 69489.0], [474.0, 65846.0], [473.0, 65069.0], [472.0, 65467.0], [471.0, 72241.0], [470.0, 69279.0], [469.0, 71694.0], [468.0, 65015.0], [494.0, 65790.0], [495.0, 65669.0], [493.0, 71394.0], [492.0, 69035.0], [491.0, 65424.0], [490.0, 64876.0], [489.0, 71599.0], [488.0, 71193.5], [486.0, 72515.0], [481.0, 65244.0], [480.0, 71870.0], [483.0, 71193.0], [482.0, 65798.0], [485.0, 68704.0], [484.0, 65546.0], [509.0, 64234.0], [510.0, 64958.0], [508.0, 68873.0], [499.0, 71320.0], [498.0, 65435.0], [497.0, 68929.5], [507.0, 65459.0], [506.0, 70399.0], [505.0, 69687.0], [504.0, 69581.0], [503.0, 69573.0], [502.0, 64544.0], [501.0, 70345.0], [500.0, 70615.0], [540.0, 68449.0], [543.0, 66240.0], [529.0, 68175.5], [531.0, 65540.0], [530.0, 64753.0], [533.0, 65466.0], [532.0, 70702.0], [542.0, 64891.0], [541.0, 68366.0], [539.0, 66325.0], [538.0, 68455.0], [537.0, 65188.0], [536.0, 68581.0], [527.0, 68347.0], [512.0, 67272.5], [514.0, 68648.0], [513.0, 68844.0], [516.0, 70693.0], [515.0, 64699.0], [518.0, 64732.0], [517.0, 71860.0], [526.0, 65737.0], [525.0, 70028.0], [524.0, 71765.0], [523.0, 70631.0], [522.0, 70598.0], [521.0, 70662.33333333333], [535.0, 71547.0], [534.0, 70567.0], [563.0, 64715.0], [571.0, 68117.0], [573.0, 64785.5], [560.0, 69664.0], [562.0, 68658.0], [561.0, 70213.0], [570.0, 65025.0], [569.0, 65880.0], [568.0, 70262.0], [550.0, 66928.33333333333], [547.0, 69649.0], [546.0, 65978.0], [544.0, 68994.0], [559.0, 65438.0], [558.0, 68140.0], [557.0, 68463.71428571428], [566.0, 66210.0], [565.0, 71173.0], [564.0, 70690.0], [600.0, 54669.0], [604.0, 51234.0], [607.0, 52275.0], [594.0, 53535.666666666664], [596.0, 54097.0], [595.0, 54040.0], [606.0, 55406.0], [605.0, 52636.0], [603.0, 52454.0], [602.0, 53260.0], [601.0, 57957.0], [591.0, 51670.0], [576.0, 68667.66666666667], [578.0, 50747.0], [577.0, 51621.0], [580.0, 49968.0], [579.0, 52797.0], [582.0, 56833.0], [581.0, 53282.0], [590.0, 52461.0], [589.0, 51334.0], [588.0, 58379.0], [587.0, 49942.0], [586.0, 51180.0], [585.0, 52035.0], [584.0, 53006.0], [599.0, 53278.5], [597.0, 54384.0], [636.0, 55447.0], [639.0, 47611.0], [625.0, 57144.0], [624.0, 56993.0], [627.0, 52831.0], [626.0, 53540.0], [629.0, 53412.0], [628.0, 53248.0], [638.0, 48737.0], [637.0, 48949.0], [635.0, 49479.0], [634.0, 54727.0], [633.0, 55600.0], [632.0, 55048.0], [623.0, 55697.0], [608.0, 55297.0], [610.0, 52253.0], [609.0, 52856.0], [612.0, 52471.0], [611.0, 52570.0], [614.0, 48315.0], [613.0, 57556.0], [622.0, 56391.0], [620.0, 52644.0], [619.0, 53150.0], [618.0, 52997.5], [617.0, 51244.0], [631.0, 56070.0], [630.0, 53293.0], [665.0, 49028.0], [669.0, 48241.0], [670.0, 54808.0], [657.0, 54706.0], [656.0, 53577.0], [659.0, 53888.0], [658.0, 48913.0], [668.0, 54299.0], [667.0, 55166.0], [666.0, 49166.0], [664.0, 50485.0], [647.0, 55568.0], [646.0, 48195.0], [645.0, 52311.0], [644.0, 55014.0], [643.0, 52786.666666666664], [640.0, 49068.0], [655.0, 49016.0], [654.0, 48210.0], [653.0, 49910.0], [652.0, 52384.0], [651.0, 52715.0], [650.0, 49568.0], [649.0, 48971.0], [648.0, 48070.0], [662.0, 48828.0], [661.0, 48384.5], [699.0, 51392.0], [691.0, 48318.0], [701.0, 52650.0], [702.0, 52000.0], [689.0, 49385.0], [688.0, 50065.0], [700.0, 48339.0], [698.0, 52479.0], [678.0, 52586.0], [677.0, 53747.0], [676.0, 53053.0], [675.0, 53932.0], [674.0, 50912.5], [672.0, 51956.0], [686.0, 52329.0], [685.0, 48895.0], [684.0, 48839.0], [683.0, 52254.0], [682.0, 54205.0], [681.0, 52044.666666666664], [694.0, 51653.0], [693.0, 51982.0], [692.0, 51676.0], [730.0, 54045.0], [731.0, 52133.0], [729.0, 52965.0], [728.0, 50469.0], [726.0, 52259.5], [724.0, 48592.0], [723.0, 52272.0], [722.0, 49339.666666666664], [719.0, 49494.0], [705.0, 51085.0], [704.0, 52373.5], [707.0, 49468.0], [706.0, 53841.0], [710.0, 49092.0], [709.0, 49748.5], [718.0, 49504.0], [717.0, 51706.0], [716.0, 49842.666666666664], [713.0, 49654.0], [712.0, 49228.5], [761.0, 48434.0], [766.0, 52308.0], [767.0, 48887.0], [753.0, 50451.0], [752.0, 52893.0], [755.0, 49883.0], [754.0, 53568.0], [757.0, 53186.0], [756.0, 52304.0], [765.0, 52567.0], [764.0, 51985.0], [763.0, 49599.5], [760.0, 51424.0], [743.0, 48937.0], [742.0, 49640.25], [738.0, 51386.42857142857], [751.0, 49058.0], [750.0, 48880.0], [749.0, 52540.0], [748.0, 51916.0], [747.0, 48976.0], [746.0, 48749.0], [745.0, 47920.0], [744.0, 51294.0], [759.0, 50764.0], [758.0, 49167.0], [796.0, 46985.0], [799.0, 41200.0], [784.0, 44278.0], [786.0, 47248.0], [785.0, 47144.0], [789.0, 44832.0], [788.0, 44207.0], [798.0, 44367.0], [797.0, 40340.0], [795.0, 47712.0], [794.0, 45185.0], [793.0, 45279.0], [792.0, 40646.0], [783.0, 42917.0], [769.0, 45503.0], [768.0, 52474.0], [772.0, 42233.0], [771.0, 42579.5], [774.0, 46431.0], [773.0, 41426.0], [782.0, 46720.0], [781.0, 49323.0], [780.0, 49120.0], [779.0, 42463.5], [777.0, 47066.0], [776.0, 42356.0], [791.0, 46494.0], [790.0, 45614.5], [825.0, 40926.0], [829.0, 40860.0], [830.0, 44342.0], [816.0, 40232.0], [818.0, 39468.0], [817.0, 43592.0], [828.0, 45833.0], [827.0, 45858.0], [826.0, 43685.0], [815.0, 41164.0], [800.0, 40471.0], [803.0, 45420.0], [801.0, 40209.0], [805.0, 45714.0], [804.0, 45773.0], [807.0, 46341.0], [806.0, 47127.0], [814.0, 47587.0], [813.0, 41363.333333333336], [810.0, 46741.0], [809.0, 40602.0], [808.0, 39889.0], [823.0, 40258.0], [821.0, 43870.0], [820.0, 46773.0], [819.0, 44974.0], [856.0, 42972.0], [861.0, 43248.0], [862.0, 41167.0], [849.0, 42590.5], [851.0, 42985.0], [850.0, 43013.0], [860.0, 36866.0], [859.0, 40870.5], [857.0, 44341.0], [847.0, 38918.0], [832.0, 45090.0], [835.0, 37330.0], [833.0, 40106.0], [837.0, 37297.0], [836.0, 39013.0], [839.0, 38956.0], [838.0, 42897.0], [846.0, 44205.0], [845.0, 39814.0], [844.0, 38956.0], [843.0, 46049.0], [842.0, 39690.0], [841.0, 43782.0], [840.0, 37747.0], [855.0, 42372.0], [854.0, 39830.0], [853.0, 40245.0], [852.0, 38874.0], [890.0, 38400.5], [894.0, 33060.0], [895.0, 41020.0], [880.0, 43418.0], [882.0, 37925.0], [881.0, 38877.0], [885.0, 36199.5], [883.0, 38917.0], [893.0, 34506.0], [892.0, 42099.0], [891.0, 33997.0], [888.0, 35930.0], [871.0, 39898.0], [870.0, 40787.0], [869.0, 43481.0], [868.0, 37593.0], [867.0, 36267.0], [866.0, 36039.0], [865.0, 35960.0], [864.0, 40192.0], [879.0, 38831.0], [878.0, 35369.0], [877.0, 43302.0], [876.0, 38820.0], [875.0, 42070.0], [874.0, 40494.0], [873.0, 34808.0], [872.0, 40888.0], [887.0, 39039.0], [886.0, 38993.0], [920.0, 35859.666666666664], [924.0, 35310.0], [927.0, 35865.0], [913.0, 32128.0], [912.0, 33600.0], [915.0, 38238.0], [914.0, 32895.0], [926.0, 31942.0], [925.0, 38470.0], [923.0, 36614.0], [922.0, 39974.0], [921.0, 35459.0], [911.0, 38428.0], [897.0, 37977.0], [896.0, 38694.0], [900.0, 33645.5], [898.0, 35003.0], [903.0, 35235.0], [902.0, 38910.0], [910.0, 40807.0], [909.0, 33254.0], [908.0, 32733.0], [907.0, 41363.0], [906.0, 36116.0], [905.0, 39195.0], [904.0, 38028.0], [917.0, 37216.0], [916.0, 39111.0], [935.0, 39354.0], [953.0, 39882.0], [959.0, 39870.0], [952.0, 39180.55555555555], [949.0, 39272.6], [948.0, 39168.0], [937.0, 39388.0], [936.0, 39427.0], [934.0, 39465.0], [933.0, 39373.0], [932.0, 38788.0], [931.0, 36392.0], [930.0, 33246.0], [928.0, 32123.0], [988.0, 39749.0], [989.0, 39614.0], [987.0, 39643.333333333336], [986.0, 39632.666666666664], [981.0, 39619.333333333336], [980.0, 39718.0], [977.0, 39450.0], [976.0, 39845.0], [975.0, 39710.0], [962.0, 39543.166666666664], [960.0, 39536.5], [967.0, 30577.0], [966.0, 39556.0], [974.0, 39684.0], [973.0, 39557.0], [971.0, 39766.0], [970.0, 39598.666666666664], [1000.0, 39601.0], [999.0, 39718.0], [998.0, 39815.0], [997.0, 39791.5], [995.0, 39818.0], [993.0, 38863.75], [1.0, 175439.0]], "isOverall": false, "label": "register", "isController": false}, {"data": [[501.1790000000001, 93505.20899999997]], "isOverall": false, "label": "register-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1363.5333333333333, "minX": 1.71998196E12, "maxY": 11279.883333333333, "series": [{"data": [[1.71998214E12, 6915.65], [1.71998196E12, 4966.25], [1.71998202E12, 11279.883333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71998214E12, 1914.6666666666667], [1.71998196E12, 1363.5333333333333], [1.71998202E12, 3101.5666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71998214E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 39816.59813084113, "minX": 1.71998196E12, "maxY": 170830.66, "series": [{"data": [[1.71998214E12, 170830.66], [1.71998196E12, 39816.59813084113], [1.71998202E12, 69414.11316872427]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71998214E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 39816.52803738316, "minX": 1.71998196E12, "maxY": 170830.6333333332, "series": [{"data": [[1.71998214E12, 170830.6333333332], [1.71998196E12, 39816.52803738316], [1.71998202E12, 69414.08230452676]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71998214E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 19.00411522633747, "minX": 1.71998196E12, "maxY": 37.58411214953272, "series": [{"data": [[1.71998214E12, 21.276666666666678], [1.71998196E12, 37.58411214953272], [1.71998202E12, 19.00411522633747]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71998214E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 30577.0, "minX": 1.71998196E12, "maxY": 180272.0, "series": [{"data": [[1.71998214E12, 180272.0], [1.71998196E12, 47712.0], [1.71998202E12, 107278.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71998214E12, 162526.0], [1.71998196E12, 30577.0], [1.71998202E12, 41426.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71998214E12, 175465.1], [1.71998196E12, 44545.5], [1.71998202E12, 101815.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71998214E12, 180044.86], [1.71998196E12, 47518.0], [1.71998202E12, 106189.31999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71998214E12, 170645.0], [1.71998196E12, 39677.0], [1.71998202E12, 65703.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71998214E12, 177647.45], [1.71998196E12, 46182.75], [1.71998202E12, 104555.95]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71998214E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 35235.0, "minX": 1.0, "maxY": 175439.0, "series": [{"data": [[41.0, 68366.0], [40.0, 101367.5], [42.0, 68975.0], [49.0, 101785.0], [52.0, 167901.0], [56.0, 51112.0], [68.0, 39619.0], [5.0, 101512.0], [6.0, 42618.5], [7.0, 99129.0], [8.0, 170123.0], [11.0, 35235.0], [12.0, 40767.5], [13.0, 46711.5], [14.0, 43777.5], [15.0, 40646.0], [16.0, 39351.5], [1.0, 175439.0], [17.0, 37690.0], [18.0, 106925.5], [19.0, 174038.0], [21.0, 76314.5], [22.0, 68824.0], [24.0, 113057.5], [25.0, 171278.0], [26.0, 113450.5], [27.0, 59946.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 68.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 35235.0, "minX": 1.0, "maxY": 175439.0, "series": [{"data": [[41.0, 68366.0], [40.0, 101367.5], [42.0, 68975.0], [49.0, 101785.0], [52.0, 167901.0], [56.0, 51112.0], [68.0, 39619.0], [5.0, 101512.0], [6.0, 42618.5], [7.0, 99129.0], [8.0, 170123.0], [11.0, 35235.0], [12.0, 40767.5], [13.0, 46711.5], [14.0, 43777.5], [15.0, 40646.0], [16.0, 39351.5], [1.0, 175439.0], [17.0, 37690.0], [18.0, 106925.5], [19.0, 174038.0], [21.0, 76314.5], [22.0, 68824.0], [24.0, 113057.5], [25.0, 171278.0], [26.0, 113450.5], [27.0, 59946.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 68.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.71998196E12, "maxY": 16.666666666666668, "series": [{"data": [[1.71998196E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71998196E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.566666666666667, "minX": 1.71998196E12, "maxY": 8.1, "series": [{"data": [[1.71998214E12, 5.0], [1.71998196E12, 3.566666666666667], [1.71998202E12, 8.1]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71998214E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.566666666666667, "minX": 1.71998196E12, "maxY": 8.1, "series": [{"data": [[1.71998214E12, 5.0], [1.71998196E12, 3.566666666666667], [1.71998202E12, 8.1]], "isOverall": false, "label": "register-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71998214E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.566666666666667, "minX": 1.71998196E12, "maxY": 8.1, "series": [{"data": [[1.71998214E12, 5.0], [1.71998196E12, 3.566666666666667], [1.71998202E12, 8.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71998214E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

