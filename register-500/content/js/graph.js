/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9246.0, "minX": 0.0, "maxY": 151372.0, "series": [{"data": [[0.0, 9246.0], [0.1, 9246.0], [0.2, 11151.0], [0.3, 11151.0], [0.4, 11699.0], [0.5, 11699.0], [0.6, 11699.0], [0.7, 12439.0], [0.8, 12905.0], [0.9, 12905.0], [1.0, 13046.0], [1.1, 13046.0], [1.2, 13588.0], [1.3, 13588.0], [1.4, 13631.0], [1.5, 13631.0], [1.6, 13651.0], [1.7, 13651.0], [1.8, 13902.0], [1.9, 13902.0], [2.0, 13938.0], [2.1, 13938.0], [2.2, 13943.0], [2.3, 13943.0], [2.4, 14245.0], [2.5, 14245.0], [2.6, 14485.0], [2.7, 14485.0], [2.8, 14485.0], [2.9, 14619.0], [3.0, 14619.0], [3.1, 14802.0], [3.2, 14802.0], [3.3, 15007.0], [3.4, 15007.0], [3.5, 15088.0], [3.6, 15088.0], [3.7, 15104.0], [3.8, 15104.0], [3.9, 15304.0], [4.0, 15304.0], [4.1, 15380.0], [4.2, 15380.0], [4.3, 15466.0], [4.4, 15466.0], [4.5, 15504.0], [4.6, 15504.0], [4.7, 15656.0], [4.8, 15656.0], [4.9, 15790.0], [5.0, 15790.0], [5.1, 15871.0], [5.2, 15871.0], [5.3, 15900.0], [5.4, 15900.0], [5.5, 15902.0], [5.6, 15902.0], [5.7, 16078.0], [5.8, 16078.0], [5.9, 16150.0], [6.0, 16150.0], [6.1, 16161.0], [6.2, 16161.0], [6.3, 16220.0], [6.4, 16220.0], [6.5, 16563.0], [6.6, 16563.0], [6.7, 16657.0], [6.8, 16657.0], [6.9, 16662.0], [7.0, 16662.0], [7.1, 16704.0], [7.2, 16704.0], [7.3, 16866.0], [7.4, 16866.0], [7.5, 16997.0], [7.6, 16997.0], [7.7, 17037.0], [7.8, 17037.0], [7.9, 17039.0], [8.0, 17039.0], [8.1, 17074.0], [8.2, 17074.0], [8.3, 17141.0], [8.4, 17141.0], [8.5, 17185.0], [8.6, 17185.0], [8.7, 17204.0], [8.8, 17283.0], [8.9, 17283.0], [9.0, 17298.0], [9.1, 17298.0], [9.2, 17332.0], [9.3, 17332.0], [9.4, 17416.0], [9.5, 17416.0], [9.6, 17462.0], [9.7, 17462.0], [9.8, 17475.0], [9.9, 17475.0], [10.0, 17498.0], [10.1, 17498.0], [10.2, 17575.0], [10.3, 17575.0], [10.4, 17624.0], [10.5, 17624.0], [10.6, 17670.0], [10.7, 17670.0], [10.8, 17702.0], [10.9, 17702.0], [11.0, 17796.0], [11.1, 17796.0], [11.2, 17931.0], [11.3, 17931.0], [11.4, 17990.0], [11.5, 17990.0], [11.6, 18020.0], [11.7, 18020.0], [11.8, 18031.0], [11.9, 18031.0], [12.0, 18099.0], [12.1, 18099.0], [12.2, 18102.0], [12.3, 18102.0], [12.4, 18112.0], [12.5, 18112.0], [12.6, 18147.0], [12.7, 18147.0], [12.8, 18211.0], [12.9, 18211.0], [13.0, 18216.0], [13.1, 18216.0], [13.2, 18230.0], [13.3, 18230.0], [13.4, 18239.0], [13.5, 18239.0], [13.6, 18248.0], [13.7, 18248.0], [13.8, 18290.0], [13.9, 18290.0], [14.0, 18312.0], [14.1, 18312.0], [14.2, 18326.0], [14.3, 18326.0], [14.4, 18391.0], [14.5, 18391.0], [14.6, 18485.0], [14.7, 18485.0], [14.8, 18515.0], [14.9, 18515.0], [15.0, 18550.0], [15.1, 18550.0], [15.2, 18592.0], [15.3, 18592.0], [15.4, 18625.0], [15.5, 18625.0], [15.6, 18642.0], [15.7, 18642.0], [15.8, 18656.0], [15.9, 18656.0], [16.0, 18668.0], [16.1, 18668.0], [16.2, 18683.0], [16.3, 18683.0], [16.4, 18861.0], [16.5, 18861.0], [16.6, 18952.0], [16.7, 18952.0], [16.8, 18971.0], [16.9, 18971.0], [17.0, 19006.0], [17.1, 19006.0], [17.2, 19054.0], [17.3, 19054.0], [17.4, 19055.0], [17.5, 19055.0], [17.6, 19057.0], [17.7, 19057.0], [17.8, 19060.0], [17.9, 19060.0], [18.0, 19110.0], [18.1, 19110.0], [18.2, 19148.0], [18.3, 19148.0], [18.4, 19169.0], [18.5, 19169.0], [18.6, 19186.0], [18.7, 19186.0], [18.8, 19191.0], [18.9, 19191.0], [19.0, 19224.0], [19.1, 19224.0], [19.2, 19249.0], [19.3, 19249.0], [19.4, 19266.0], [19.5, 19266.0], [19.6, 19273.0], [19.7, 19273.0], [19.8, 19274.0], [19.9, 19274.0], [20.0, 19287.0], [20.1, 19287.0], [20.2, 19294.0], [20.3, 19294.0], [20.4, 19328.0], [20.5, 19328.0], [20.6, 19352.0], [20.7, 19352.0], [20.8, 19362.0], [20.9, 19362.0], [21.0, 19375.0], [21.1, 19375.0], [21.2, 19390.0], [21.3, 19390.0], [21.4, 19399.0], [21.5, 19399.0], [21.6, 19407.0], [21.7, 19407.0], [21.8, 19409.0], [21.9, 19409.0], [22.0, 19455.0], [22.1, 19455.0], [22.2, 19461.0], [22.3, 19461.0], [22.4, 19496.0], [22.5, 19496.0], [22.6, 19534.0], [22.7, 19534.0], [22.8, 19544.0], [22.9, 19544.0], [23.0, 19548.0], [23.1, 19548.0], [23.2, 19548.0], [23.3, 19548.0], [23.4, 19549.0], [23.5, 19549.0], [23.6, 19553.0], [23.7, 19553.0], [23.8, 19564.0], [23.9, 19564.0], [24.0, 19579.0], [24.1, 19579.0], [24.2, 19585.0], [24.3, 19585.0], [24.4, 19590.0], [24.5, 19590.0], [24.6, 19590.0], [24.7, 19590.0], [24.8, 19628.0], [24.9, 19628.0], [25.0, 19660.0], [25.1, 19660.0], [25.2, 19667.0], [25.3, 19667.0], [25.4, 19678.0], [25.5, 19678.0], [25.6, 19698.0], [25.7, 19698.0], [25.8, 19699.0], [25.9, 19699.0], [26.0, 19702.0], [26.1, 19702.0], [26.2, 19703.0], [26.3, 19703.0], [26.4, 19754.0], [26.5, 19754.0], [26.6, 19758.0], [26.7, 19758.0], [26.8, 19759.0], [26.9, 19759.0], [27.0, 19768.0], [27.1, 19768.0], [27.2, 19788.0], [27.3, 19788.0], [27.4, 19812.0], [27.5, 19812.0], [27.6, 19822.0], [27.7, 19822.0], [27.8, 19834.0], [27.9, 19834.0], [28.0, 19852.0], [28.1, 19852.0], [28.2, 19880.0], [28.3, 19880.0], [28.4, 19887.0], [28.5, 19887.0], [28.6, 19904.0], [28.7, 19904.0], [28.8, 19907.0], [28.9, 19907.0], [29.0, 19945.0], [29.1, 19945.0], [29.2, 19947.0], [29.3, 19947.0], [29.4, 19951.0], [29.5, 19951.0], [29.6, 19958.0], [29.7, 19958.0], [29.8, 19965.0], [29.9, 19965.0], [30.0, 19977.0], [30.1, 19977.0], [30.2, 19993.0], [30.3, 19993.0], [30.4, 20001.0], [30.5, 20001.0], [30.6, 20008.0], [30.7, 20008.0], [30.8, 20009.0], [30.9, 20009.0], [31.0, 20012.0], [31.1, 20012.0], [31.2, 20022.0], [31.3, 20022.0], [31.4, 20023.0], [31.5, 20023.0], [31.6, 20026.0], [31.7, 20026.0], [31.8, 20067.0], [31.9, 20067.0], [32.0, 20085.0], [32.1, 20085.0], [32.2, 20095.0], [32.3, 20095.0], [32.4, 20096.0], [32.5, 20096.0], [32.6, 20106.0], [32.7, 20106.0], [32.8, 20124.0], [32.9, 20124.0], [33.0, 20168.0], [33.1, 20168.0], [33.2, 20378.0], [33.3, 20378.0], [33.4, 20478.0], [33.5, 20478.0], [33.6, 20608.0], [33.7, 20608.0], [33.8, 20814.0], [33.9, 20814.0], [34.0, 20848.0], [34.1, 20848.0], [34.2, 21052.0], [34.3, 21052.0], [34.4, 21062.0], [34.5, 21062.0], [34.6, 21144.0], [34.7, 21144.0], [34.8, 21161.0], [34.9, 21161.0], [35.0, 21208.0], [35.1, 21208.0], [35.2, 21339.0], [35.3, 21339.0], [35.4, 21451.0], [35.5, 21451.0], [35.6, 21565.0], [35.7, 21565.0], [35.8, 21611.0], [35.9, 21611.0], [36.0, 21710.0], [36.1, 21710.0], [36.2, 21912.0], [36.3, 21912.0], [36.4, 22045.0], [36.5, 22045.0], [36.6, 22053.0], [36.7, 22053.0], [36.8, 22074.0], [36.9, 22074.0], [37.0, 22138.0], [37.1, 22138.0], [37.2, 22144.0], [37.3, 22144.0], [37.4, 22167.0], [37.5, 22167.0], [37.6, 22182.0], [37.7, 22182.0], [37.8, 22350.0], [37.9, 22350.0], [38.0, 22442.0], [38.1, 22442.0], [38.2, 22443.0], [38.3, 22443.0], [38.4, 22443.0], [38.5, 22453.0], [38.6, 22453.0], [38.7, 22541.0], [38.8, 22541.0], [38.9, 22593.0], [39.0, 22593.0], [39.1, 22664.0], [39.2, 22664.0], [39.3, 22785.0], [39.4, 22785.0], [39.5, 22808.0], [39.6, 22808.0], [39.7, 22831.0], [39.8, 22831.0], [39.9, 22878.0], [40.0, 22878.0], [40.1, 22891.0], [40.2, 22891.0], [40.3, 22911.0], [40.4, 22911.0], [40.5, 22922.0], [40.6, 22922.0], [40.7, 22926.0], [40.8, 22926.0], [40.9, 22945.0], [41.0, 22945.0], [41.1, 23085.0], [41.2, 23085.0], [41.3, 23198.0], [41.4, 23198.0], [41.5, 23208.0], [41.6, 23208.0], [41.7, 23338.0], [41.8, 23338.0], [41.9, 23541.0], [42.0, 23541.0], [42.1, 23604.0], [42.2, 23604.0], [42.3, 23990.0], [42.4, 23990.0], [42.5, 23995.0], [42.6, 23995.0], [42.7, 24006.0], [42.8, 24006.0], [42.9, 24023.0], [43.0, 24023.0], [43.1, 24095.0], [43.2, 24095.0], [43.3, 24101.0], [43.4, 24101.0], [43.5, 24130.0], [43.6, 24130.0], [43.7, 24195.0], [43.8, 24195.0], [43.9, 24279.0], [44.0, 24279.0], [44.1, 24287.0], [44.2, 24287.0], [44.3, 24289.0], [44.4, 24289.0], [44.5, 24325.0], [44.6, 24325.0], [44.7, 24425.0], [44.8, 24425.0], [44.9, 24439.0], [45.0, 24439.0], [45.1, 24500.0], [45.2, 24500.0], [45.3, 24511.0], [45.4, 24511.0], [45.5, 24538.0], [45.6, 24538.0], [45.7, 24583.0], [45.8, 24583.0], [45.9, 24593.0], [46.0, 24593.0], [46.1, 24679.0], [46.2, 24679.0], [46.3, 24722.0], [46.4, 24722.0], [46.5, 24831.0], [46.6, 24831.0], [46.7, 24916.0], [46.8, 24916.0], [46.9, 24922.0], [47.0, 24922.0], [47.1, 24984.0], [47.2, 24984.0], [47.3, 24996.0], [47.4, 24996.0], [47.5, 25099.0], [47.6, 25099.0], [47.7, 25175.0], [47.8, 25175.0], [47.9, 25235.0], [48.0, 25235.0], [48.1, 25240.0], [48.2, 25240.0], [48.3, 25609.0], [48.4, 25609.0], [48.5, 25638.0], [48.6, 25638.0], [48.7, 25652.0], [48.8, 25652.0], [48.9, 25745.0], [49.0, 25745.0], [49.1, 26037.0], [49.2, 26037.0], [49.3, 26238.0], [49.4, 26238.0], [49.5, 26248.0], [49.6, 26248.0], [49.7, 26297.0], [49.8, 26297.0], [49.9, 26309.0], [50.0, 26309.0], [50.1, 26388.0], [50.2, 26388.0], [50.3, 26395.0], [50.4, 26395.0], [50.5, 26629.0], [50.6, 26629.0], [50.7, 26724.0], [50.8, 26724.0], [50.9, 26729.0], [51.0, 26729.0], [51.1, 26729.0], [51.2, 26729.0], [51.3, 26814.0], [51.4, 26814.0], [51.5, 26817.0], [51.6, 26817.0], [51.7, 26857.0], [51.8, 26857.0], [51.9, 26899.0], [52.0, 26899.0], [52.1, 27034.0], [52.2, 27034.0], [52.3, 27158.0], [52.4, 27158.0], [52.5, 27448.0], [52.6, 27448.0], [52.7, 27506.0], [52.8, 27506.0], [52.9, 27552.0], [53.0, 27552.0], [53.1, 27736.0], [53.2, 27736.0], [53.3, 27782.0], [53.4, 27782.0], [53.5, 27823.0], [53.6, 27823.0], [53.7, 27950.0], [53.8, 27950.0], [53.9, 28190.0], [54.0, 28190.0], [54.1, 28276.0], [54.2, 28276.0], [54.3, 29126.0], [54.4, 29126.0], [54.5, 30042.0], [54.6, 30042.0], [54.7, 30217.0], [54.8, 30217.0], [54.9, 30254.0], [55.0, 30254.0], [55.1, 30254.0], [55.2, 30254.0], [55.3, 30344.0], [55.4, 30344.0], [55.5, 30435.0], [55.6, 30435.0], [55.7, 30617.0], [55.8, 30617.0], [55.9, 30629.0], [56.0, 30629.0], [56.1, 30637.0], [56.2, 30637.0], [56.3, 30669.0], [56.4, 30669.0], [56.5, 30677.0], [56.6, 30677.0], [56.7, 30725.0], [56.8, 30725.0], [56.9, 30747.0], [57.0, 30747.0], [57.1, 30759.0], [57.2, 30759.0], [57.3, 30767.0], [57.4, 30767.0], [57.5, 30835.0], [57.6, 30835.0], [57.7, 30856.0], [57.8, 30856.0], [57.9, 30964.0], [58.0, 30964.0], [58.1, 31101.0], [58.2, 31101.0], [58.3, 31109.0], [58.4, 31109.0], [58.5, 31188.0], [58.6, 31188.0], [58.7, 31276.0], [58.8, 31276.0], [58.9, 31331.0], [59.0, 31331.0], [59.1, 31354.0], [59.2, 31354.0], [59.3, 31398.0], [59.4, 31398.0], [59.5, 31422.0], [59.6, 31422.0], [59.7, 31439.0], [59.8, 31439.0], [59.9, 31452.0], [60.0, 31452.0], [60.1, 31484.0], [60.2, 31484.0], [60.3, 31579.0], [60.4, 31579.0], [60.5, 31597.0], [60.6, 31597.0], [60.7, 31611.0], [60.8, 31611.0], [60.9, 31671.0], [61.0, 31671.0], [61.1, 31781.0], [61.2, 31781.0], [61.3, 31829.0], [61.4, 31829.0], [61.5, 31919.0], [61.6, 31919.0], [61.7, 31993.0], [61.8, 31993.0], [61.9, 32116.0], [62.0, 32116.0], [62.1, 32129.0], [62.2, 32129.0], [62.3, 32292.0], [62.4, 32292.0], [62.5, 32341.0], [62.6, 32341.0], [62.7, 32363.0], [62.8, 32363.0], [62.9, 32388.0], [63.0, 32388.0], [63.1, 32391.0], [63.2, 32391.0], [63.3, 32406.0], [63.4, 32406.0], [63.5, 32445.0], [63.6, 32445.0], [63.7, 32817.0], [63.8, 32817.0], [63.9, 32878.0], [64.0, 32878.0], [64.1, 33068.0], [64.2, 33068.0], [64.3, 33098.0], [64.4, 33098.0], [64.5, 33140.0], [64.6, 33140.0], [64.7, 33201.0], [64.8, 33201.0], [64.9, 33356.0], [65.0, 33356.0], [65.1, 33369.0], [65.2, 33369.0], [65.3, 33469.0], [65.4, 33469.0], [65.5, 33537.0], [65.6, 33537.0], [65.7, 33610.0], [65.8, 33610.0], [65.9, 33679.0], [66.0, 33679.0], [66.1, 33790.0], [66.2, 33790.0], [66.3, 33815.0], [66.4, 33815.0], [66.5, 33939.0], [66.6, 33939.0], [66.7, 33951.0], [66.8, 33951.0], [66.9, 34099.0], [67.0, 34099.0], [67.1, 34332.0], [67.2, 34332.0], [67.3, 34368.0], [67.4, 34368.0], [67.5, 34378.0], [67.6, 34378.0], [67.7, 34409.0], [67.8, 34409.0], [67.9, 34445.0], [68.0, 34445.0], [68.1, 34499.0], [68.2, 34499.0], [68.3, 34505.0], [68.4, 34505.0], [68.5, 34546.0], [68.6, 34546.0], [68.7, 34550.0], [68.8, 34550.0], [68.9, 34648.0], [69.0, 34648.0], [69.1, 34665.0], [69.2, 34665.0], [69.3, 34708.0], [69.4, 34708.0], [69.5, 34780.0], [69.6, 34780.0], [69.7, 34817.0], [69.8, 34817.0], [69.9, 34835.0], [70.0, 34835.0], [70.1, 34856.0], [70.2, 34856.0], [70.3, 35015.0], [70.4, 35015.0], [70.5, 35101.0], [70.6, 35101.0], [70.7, 35136.0], [70.8, 35136.0], [70.9, 35138.0], [71.0, 35138.0], [71.1, 35317.0], [71.2, 35317.0], [71.3, 35421.0], [71.4, 35421.0], [71.5, 35464.0], [71.6, 35464.0], [71.7, 35616.0], [71.8, 35616.0], [71.9, 35655.0], [72.0, 35655.0], [72.1, 35662.0], [72.2, 35662.0], [72.3, 35755.0], [72.4, 35755.0], [72.5, 36125.0], [72.6, 36125.0], [72.7, 36146.0], [72.8, 36146.0], [72.9, 36306.0], [73.0, 36306.0], [73.1, 36308.0], [73.2, 36308.0], [73.3, 36354.0], [73.4, 36354.0], [73.5, 36415.0], [73.6, 36415.0], [73.7, 36511.0], [73.8, 36511.0], [73.9, 36568.0], [74.0, 36568.0], [74.1, 36645.0], [74.2, 36645.0], [74.3, 36702.0], [74.4, 36702.0], [74.5, 36724.0], [74.6, 36724.0], [74.7, 36736.0], [74.8, 36736.0], [74.9, 36799.0], [75.0, 36799.0], [75.1, 36874.0], [75.2, 36874.0], [75.3, 37086.0], [75.4, 37086.0], [75.5, 37087.0], [75.6, 37087.0], [75.7, 37681.0], [75.8, 37681.0], [75.9, 46425.0], [76.0, 46425.0], [76.1, 46634.0], [76.2, 46634.0], [76.3, 46637.0], [76.4, 46637.0], [76.5, 46655.0], [76.6, 46655.0], [76.7, 46756.0], [76.8, 46756.0], [76.9, 46765.0], [77.0, 46765.0], [77.1, 46838.0], [77.2, 46838.0], [77.3, 47101.0], [77.4, 47101.0], [77.5, 47206.0], [77.6, 47206.0], [77.7, 47276.0], [77.8, 47276.0], [77.9, 47541.0], [78.0, 47541.0], [78.1, 47741.0], [78.2, 47741.0], [78.3, 47923.0], [78.4, 47923.0], [78.5, 48200.0], [78.6, 48200.0], [78.7, 48217.0], [78.8, 48217.0], [78.9, 48251.0], [79.0, 48251.0], [79.1, 48324.0], [79.2, 48324.0], [79.3, 48626.0], [79.4, 48626.0], [79.5, 48775.0], [79.6, 48775.0], [79.7, 48806.0], [79.8, 48806.0], [79.9, 48917.0], [80.0, 48917.0], [80.1, 48954.0], [80.2, 48954.0], [80.3, 49084.0], [80.4, 49084.0], [80.5, 49323.0], [80.6, 49323.0], [80.7, 49349.0], [80.8, 49349.0], [80.9, 49368.0], [81.0, 49368.0], [81.1, 49460.0], [81.2, 49460.0], [81.3, 49465.0], [81.4, 49465.0], [81.5, 49618.0], [81.6, 49618.0], [81.7, 49728.0], [81.8, 49728.0], [81.9, 50179.0], [82.0, 50179.0], [82.1, 50419.0], [82.2, 50419.0], [82.3, 50568.0], [82.4, 50568.0], [82.5, 50572.0], [82.6, 50572.0], [82.7, 50608.0], [82.8, 50608.0], [82.9, 50738.0], [83.0, 50738.0], [83.1, 50788.0], [83.2, 50788.0], [83.3, 50929.0], [83.4, 50929.0], [83.5, 50940.0], [83.6, 50940.0], [83.7, 50978.0], [83.8, 50978.0], [83.9, 51340.0], [84.0, 51340.0], [84.1, 51416.0], [84.2, 51416.0], [84.3, 51461.0], [84.4, 51461.0], [84.5, 51561.0], [84.6, 51561.0], [84.7, 51917.0], [84.8, 51917.0], [84.9, 52220.0], [85.0, 52220.0], [85.1, 52239.0], [85.2, 52239.0], [85.3, 52317.0], [85.4, 52317.0], [85.5, 52477.0], [85.6, 52477.0], [85.7, 52496.0], [85.8, 52496.0], [85.9, 52607.0], [86.0, 52607.0], [86.1, 52687.0], [86.2, 52687.0], [86.3, 53036.0], [86.4, 53036.0], [86.5, 53175.0], [86.6, 53175.0], [86.7, 53333.0], [86.8, 53333.0], [86.9, 53333.0], [87.0, 53333.0], [87.1, 53516.0], [87.2, 53516.0], [87.3, 53664.0], [87.4, 53664.0], [87.5, 53707.0], [87.6, 53707.0], [87.7, 53715.0], [87.8, 53715.0], [87.9, 54032.0], [88.0, 54032.0], [88.1, 54185.0], [88.2, 54185.0], [88.3, 79134.0], [88.4, 79134.0], [88.5, 79135.0], [88.6, 79135.0], [88.7, 79141.0], [88.8, 79141.0], [88.9, 79166.0], [89.0, 79166.0], [89.1, 79267.0], [89.2, 79267.0], [89.3, 79362.0], [89.4, 79362.0], [89.5, 79394.0], [89.6, 79394.0], [89.7, 79509.0], [89.8, 79509.0], [89.9, 79558.0], [90.0, 79558.0], [90.1, 79580.0], [90.2, 79580.0], [90.3, 79599.0], [90.4, 79599.0], [90.5, 79840.0], [90.6, 79840.0], [90.7, 79968.0], [90.8, 79968.0], [90.9, 79980.0], [91.0, 79980.0], [91.1, 79982.0], [91.2, 79982.0], [91.3, 80079.0], [91.4, 80079.0], [91.5, 80237.0], [91.6, 80237.0], [91.7, 80386.0], [91.8, 80386.0], [91.9, 80712.0], [92.0, 80712.0], [92.1, 80911.0], [92.2, 80911.0], [92.3, 81101.0], [92.4, 81101.0], [92.5, 81153.0], [92.6, 81153.0], [92.7, 81227.0], [92.8, 81227.0], [92.9, 81238.0], [93.0, 81238.0], [93.1, 81335.0], [93.2, 81335.0], [93.3, 81348.0], [93.4, 81348.0], [93.5, 81637.0], [93.6, 81637.0], [93.7, 81936.0], [93.8, 81936.0], [93.9, 82208.0], [94.0, 82208.0], [94.1, 82597.0], [94.2, 82597.0], [94.3, 82755.0], [94.4, 82755.0], [94.5, 83266.0], [94.6, 83266.0], [94.7, 83402.0], [94.8, 83402.0], [94.9, 83483.0], [95.0, 83483.0], [95.1, 83492.0], [95.2, 83492.0], [95.3, 84341.0], [95.4, 84341.0], [95.5, 84439.0], [95.6, 84439.0], [95.7, 84649.0], [95.8, 84649.0], [95.9, 84747.0], [96.0, 84747.0], [96.1, 84811.0], [96.2, 84811.0], [96.3, 84932.0], [96.4, 84932.0], [96.5, 84948.0], [96.6, 84948.0], [96.7, 85030.0], [96.8, 85030.0], [96.9, 85077.0], [97.0, 85077.0], [97.1, 85197.0], [97.2, 85197.0], [97.3, 85257.0], [97.4, 85257.0], [97.5, 85409.0], [97.6, 85409.0], [97.7, 85674.0], [97.8, 85674.0], [97.9, 86076.0], [98.0, 86076.0], [98.1, 86126.0], [98.2, 86126.0], [98.3, 144445.0], [98.4, 144445.0], [98.5, 145875.0], [98.6, 145875.0], [98.7, 145953.0], [98.8, 145953.0], [98.9, 146464.0], [99.0, 146464.0], [99.1, 147819.0], [99.2, 147819.0], [99.3, 147877.0], [99.4, 147877.0], [99.5, 149738.0], [99.6, 149738.0], [99.7, 150538.0], [99.8, 150538.0], [99.9, 151372.0], [100.0, 151372.0]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 9200.0, "maxY": 11.0, "series": [{"data": [[146400.0, 1.0], [150500.0, 1.0], [81900.0, 1.0], [79500.0, 4.0], [81100.0, 2.0], [80300.0, 1.0], [84300.0, 1.0], [85100.0, 1.0], [82700.0, 1.0], [33300.0, 2.0], [34500.0, 3.0], [33700.0, 1.0], [36100.0, 2.0], [35300.0, 1.0], [36500.0, 2.0], [35700.0, 1.0], [145900.0, 1.0], [48900.0, 2.0], [47700.0, 1.0], [50500.0, 2.0], [50900.0, 3.0], [49300.0, 3.0], [49700.0, 1.0], [50100.0, 1.0], [51300.0, 1.0], [53700.0, 2.0], [53300.0, 2.0], [54100.0, 1.0], [80200.0, 1.0], [85000.0, 2.0], [83400.0, 3.0], [80900.0, 1.0], [79300.0, 2.0], [84900.0, 2.0], [82500.0, 1.0], [9200.0, 1.0], [11100.0, 1.0], [11600.0, 1.0], [12400.0, 1.0], [12900.0, 1.0], [13000.0, 1.0], [13500.0, 1.0], [13600.0, 2.0], [14200.0, 1.0], [13900.0, 3.0], [14400.0, 1.0], [14800.0, 1.0], [14600.0, 1.0], [15000.0, 2.0], [15300.0, 2.0], [15100.0, 1.0], [15600.0, 1.0], [15400.0, 1.0], [15500.0, 1.0], [15700.0, 1.0], [15800.0, 1.0], [15900.0, 2.0], [16100.0, 2.0], [16200.0, 1.0], [16000.0, 1.0], [17400.0, 4.0], [16600.0, 2.0], [16800.0, 1.0], [17000.0, 3.0], [17200.0, 3.0], [17600.0, 2.0], [18000.0, 3.0], [18200.0, 6.0], [18400.0, 1.0], [18600.0, 5.0], [19400.0, 5.0], [19000.0, 5.0], [19200.0, 7.0], [18800.0, 1.0], [20000.0, 11.0], [19800.0, 6.0], [19600.0, 6.0], [20400.0, 1.0], [20800.0, 2.0], [21200.0, 1.0], [21000.0, 2.0], [20600.0, 1.0], [21400.0, 1.0], [21600.0, 1.0], [22000.0, 3.0], [22400.0, 3.0], [22600.0, 1.0], [22800.0, 4.0], [23000.0, 1.0], [23200.0, 1.0], [24400.0, 2.0], [24000.0, 3.0], [24200.0, 3.0], [23600.0, 1.0], [25000.0, 1.0], [25200.0, 2.0], [24800.0, 1.0], [24600.0, 1.0], [26200.0, 3.0], [25600.0, 3.0], [26000.0, 1.0], [26600.0, 1.0], [26800.0, 4.0], [27400.0, 1.0], [27000.0, 1.0], [27800.0, 1.0], [28200.0, 1.0], [30200.0, 3.0], [30600.0, 5.0], [30400.0, 1.0], [30000.0, 1.0], [30800.0, 2.0], [31400.0, 4.0], [31600.0, 2.0], [31200.0, 1.0], [31800.0, 1.0], [32200.0, 1.0], [32400.0, 2.0], [34400.0, 3.0], [34000.0, 1.0], [34800.0, 3.0], [33200.0, 1.0], [32800.0, 2.0], [33600.0, 2.0], [35600.0, 3.0], [36400.0, 1.0], [36800.0, 1.0], [37600.0, 1.0], [46400.0, 1.0], [46800.0, 1.0], [48800.0, 1.0], [47200.0, 2.0], [49600.0, 1.0], [50400.0, 1.0], [52400.0, 2.0], [54000.0, 1.0], [53600.0, 1.0], [81600.0, 1.0], [80000.0, 1.0], [79200.0, 1.0], [85600.0, 1.0], [83200.0, 1.0], [84800.0, 1.0], [151300.0, 1.0], [149700.0, 1.0], [79100.0, 4.0], [79900.0, 3.0], [80700.0, 1.0], [84700.0, 1.0], [145800.0, 1.0], [33900.0, 2.0], [34700.0, 2.0], [33100.0, 1.0], [34300.0, 3.0], [33500.0, 1.0], [35100.0, 3.0], [36300.0, 3.0], [36700.0, 4.0], [46700.0, 2.0], [47100.0, 1.0], [48300.0, 1.0], [47900.0, 1.0], [48700.0, 1.0], [47500.0, 1.0], [50700.0, 2.0], [51500.0, 1.0], [51900.0, 1.0], [53100.0, 1.0], [52300.0, 1.0], [53500.0, 1.0], [79800.0, 1.0], [85400.0, 1.0], [84600.0, 1.0], [82200.0, 1.0], [144400.0, 1.0], [81300.0, 2.0], [86100.0, 1.0], [147800.0, 2.0], [17300.0, 1.0], [16700.0, 1.0], [17100.0, 2.0], [16500.0, 1.0], [16900.0, 1.0], [17700.0, 2.0], [18300.0, 3.0], [18100.0, 3.0], [17500.0, 1.0], [17900.0, 2.0], [19300.0, 6.0], [18900.0, 2.0], [19100.0, 5.0], [18500.0, 3.0], [19700.0, 7.0], [19900.0, 9.0], [19500.0, 11.0], [20100.0, 3.0], [20300.0, 1.0], [21300.0, 1.0], [21100.0, 2.0], [21500.0, 1.0], [22100.0, 4.0], [21700.0, 1.0], [22500.0, 2.0], [21900.0, 1.0], [22300.0, 1.0], [22900.0, 4.0], [23100.0, 1.0], [23500.0, 1.0], [22700.0, 1.0], [23300.0, 1.0], [24100.0, 3.0], [24500.0, 5.0], [24300.0, 1.0], [23900.0, 2.0], [24900.0, 4.0], [25100.0, 1.0], [24700.0, 1.0], [25700.0, 1.0], [26300.0, 3.0], [26700.0, 3.0], [27500.0, 2.0], [27100.0, 1.0], [28100.0, 1.0], [27700.0, 2.0], [27900.0, 1.0], [29100.0, 1.0], [30700.0, 4.0], [30300.0, 1.0], [31100.0, 3.0], [31500.0, 2.0], [31300.0, 3.0], [31700.0, 1.0], [30900.0, 1.0], [32300.0, 4.0], [32100.0, 2.0], [31900.0, 2.0], [33400.0, 1.0], [33000.0, 2.0], [34600.0, 2.0], [33800.0, 1.0], [35400.0, 2.0], [36600.0, 1.0], [35000.0, 1.0], [37000.0, 2.0], [46600.0, 3.0], [48200.0, 3.0], [49000.0, 1.0], [48600.0, 1.0], [49400.0, 2.0], [50600.0, 1.0], [51400.0, 2.0], [52200.0, 2.0], [53000.0, 1.0], [52600.0, 2.0], [81200.0, 2.0], [85200.0, 1.0], [86000.0, 1.0], [84400.0, 1.0]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 151300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 500.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 500.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 500.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.444444444444445, "minX": 1.71994098E12, "maxY": 420.40624999999994, "series": [{"data": [[1.7199411E12, 35.239999999999995], [1.71994104E12, 200.12455516014253], [1.71994116E12, 5.444444444444445], [1.71994098E12, 420.40624999999994]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71994116E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 11151.0, "minX": 2.0, "maxY": 150549.33333333334, "series": [{"data": [[2.0, 146169.5], [3.0, 147877.0], [4.0, 147819.0], [5.0, 145953.0], [6.0, 144445.0], [9.0, 150549.33333333334], [10.0, 80712.0], [11.0, 79982.0], [12.0, 79135.0], [13.0, 79166.0], [15.0, 79780.0], [16.0, 80237.0], [17.0, 79394.0], [19.0, 81297.0], [20.0, 79362.0], [21.0, 79134.0], [22.0, 79968.0], [23.0, 81153.0], [24.0, 80911.0], [25.0, 81227.0], [27.0, 82045.0], [28.0, 79267.0], [29.0, 83483.0], [37.0, 80670.875], [38.0, 82597.0], [40.0, 82998.5], [43.0, 81936.0], [42.0, 81500.5], [45.0, 84734.5], [46.0, 83266.0], [49.0, 85197.0], [48.0, 82519.5], [51.0, 86076.0], [50.0, 85674.0], [53.0, 85409.0], [52.0, 84932.0], [54.0, 85077.0], [57.0, 84948.0], [56.0, 85691.5], [59.0, 84544.0], [61.0, 47276.0], [60.0, 47206.0], [63.0, 46838.0], [62.0, 47741.0], [67.0, 46637.0], [66.0, 50179.0], [65.0, 47541.0], [64.0, 46765.0], [71.0, 46644.5], [69.0, 47923.0], [68.0, 48775.0], [75.0, 50788.0], [74.0, 48626.0], [73.0, 48809.5], [78.0, 49570.0], [76.0, 49084.0], [83.0, 50419.0], [82.0, 52220.0], [81.0, 52496.0], [80.0, 51647.5], [87.0, 48324.0], [86.0, 50178.0], [84.0, 50608.0], [91.0, 52687.0], [90.0, 50572.0], [89.0, 52607.0], [88.0, 49465.0], [95.0, 53707.0], [94.0, 53036.0], [93.0, 53664.0], [92.0, 53516.0], [98.0, 47101.0], [97.0, 52239.0], [96.0, 48806.0], [103.0, 49538.5], [101.0, 49460.0], [100.0, 47671.0], [107.0, 51064.5], [105.0, 49323.0], [104.0, 46756.0], [111.0, 50067.0], [109.0, 50748.5], [115.0, 51561.0], [114.0, 51461.0], [113.0, 52477.0], [112.0, 51340.0], [117.0, 53333.0], [116.0, 51416.0], [122.0, 31919.0], [121.0, 53715.0], [120.0, 53850.0], [127.0, 37681.0], [126.0, 36724.0], [125.0, 31579.0], [124.0, 31388.0], [135.0, 32878.0], [134.0, 31993.0], [133.0, 31611.0], [132.0, 30609.0], [131.0, 30746.0], [128.0, 33610.0], [143.0, 33679.0], [142.0, 30042.0], [141.0, 32129.0], [140.0, 34550.0], [139.0, 31452.0], [138.0, 30637.0], [137.0, 30344.0], [136.0, 31781.0], [151.0, 35616.0], [150.0, 33951.0], [149.0, 34817.0], [148.0, 31439.0], [147.0, 30835.0], [146.0, 34368.0], [145.0, 36354.0], [144.0, 32388.0], [158.0, 33098.0], [157.0, 33356.0], [156.0, 31902.0], [154.0, 31101.0], [153.0, 36874.0], [152.0, 34378.0], [167.0, 32292.0], [166.0, 30435.0], [165.0, 33555.0], [163.0, 30629.0], [162.0, 30677.0], [161.0, 32391.0], [160.0, 32826.5], [175.0, 31597.0], [174.0, 31074.666666666668], [171.0, 34505.0], [170.0, 30967.5], [168.0, 33790.0], [183.0, 35076.5], [181.0, 34332.0], [180.0, 33815.0], [179.0, 31836.5], [177.0, 34445.0], [176.0, 31671.0], [190.0, 36415.0], [189.0, 36736.0], [188.0, 34648.0], [187.0, 34856.0], [186.0, 35705.0], [184.0, 34546.0], [198.0, 36568.0], [197.0, 36306.0], [196.0, 36511.0], [195.0, 36799.0], [194.0, 37087.0], [193.0, 36645.0], [192.0, 36061.5], [207.0, 33140.0], [206.0, 32341.0], [205.0, 33068.0], [204.0, 32363.0], [203.0, 31829.0], [202.0, 33369.0], [201.0, 30217.0], [200.0, 36605.5], [215.0, 34835.0], [214.0, 35101.0], [213.0, 34780.0], [212.0, 34708.0], [211.0, 33201.0], [210.0, 30759.0], [209.0, 34409.0], [208.0, 31109.0], [223.0, 30669.0], [222.0, 33469.0], [221.0, 36146.0], [220.0, 31484.0], [219.0, 35662.0], [218.0, 33939.0], [217.0, 35317.0], [216.0, 36308.0], [231.0, 23604.0], [230.0, 22053.0], [229.0, 22350.0], [228.0, 22593.0], [227.0, 35464.0], [226.0, 35136.0], [225.0, 34499.0], [224.0, 34099.0], [239.0, 24289.0], [238.0, 24095.0], [237.0, 25240.0], [236.0, 22891.0], [235.0, 29126.0], [234.0, 24195.0], [233.0, 23338.0], [232.0, 27158.0], [247.0, 30254.0], [246.0, 24916.0], [245.0, 23990.0], [244.0, 24831.0], [243.0, 26297.0], [242.0, 22167.0], [241.0, 22922.0], [240.0, 24679.0], [255.0, 22074.0], [254.0, 26729.0], [253.0, 21912.0], [252.0, 25638.0], [251.0, 24593.0], [250.0, 27950.0], [249.0, 22442.0], [248.0, 27506.0], [270.0, 22453.0], [271.0, 24538.0], [269.0, 25609.0], [268.0, 27823.0], [267.0, 28276.0], [266.0, 24752.5], [264.0, 26037.0], [263.0, 26248.0], [257.0, 27736.0], [256.0, 23995.0], [259.0, 26629.0], [258.0, 26814.0], [262.0, 28190.0], [261.0, 22878.0], [260.0, 27782.0], [286.0, 26395.0], [287.0, 23208.0], [285.0, 24511.0], [284.0, 23991.5], [282.0, 25235.0], [281.0, 22945.0], [280.0, 24101.0], [279.0, 24984.0], [273.0, 26388.0], [272.0, 24279.0], [275.0, 26857.0], [274.0, 27552.0], [278.0, 24722.0], [277.0, 22664.0], [276.0, 24325.0], [302.0, 26817.0], [303.0, 26724.0], [301.0, 24425.0], [300.0, 27448.0], [299.0, 26729.0], [298.0, 26238.0], [297.0, 24996.0], [296.0, 25745.0], [295.0, 24287.0], [289.0, 26309.0], [288.0, 25099.0], [291.0, 23085.0], [290.0, 22785.0], [294.0, 22831.0], [293.0, 25652.0], [292.0, 27034.0], [316.0, 17624.0], [318.0, 17931.0], [319.0, 21451.0], [317.0, 18031.0], [315.0, 21565.0], [314.0, 23527.333333333332], [311.0, 19060.0], [305.0, 18515.0], [304.0, 26899.0], [307.0, 19054.0], [306.0, 19266.0], [310.0, 19628.0], [309.0, 19590.0], [308.0, 19660.0], [334.0, 22443.0], [335.0, 21144.0], [333.0, 22926.0], [332.0, 21062.0], [331.0, 24130.0], [330.0, 22911.0], [329.0, 20478.0], [328.0, 22138.0], [327.0, 21710.0], [321.0, 19294.0], [320.0, 24023.0], [323.0, 24006.0], [322.0, 22144.0], [326.0, 20378.0], [325.0, 20095.0], [324.0, 23198.0], [350.0, 18485.0], [351.0, 16220.0], [349.0, 19698.0], [348.0, 21052.0], [347.0, 18147.0], [346.0, 18290.0], [345.0, 18642.0], [344.0, 20848.0], [343.0, 24439.0], [337.0, 22182.0], [336.0, 19191.0], [339.0, 16161.0], [338.0, 20608.0], [342.0, 19273.0], [341.0, 21161.0], [340.0, 16078.0], [366.0, 21208.0], [367.0, 17462.0], [365.0, 16866.0], [364.0, 18952.0], [363.0, 17796.0], [362.0, 17298.0], [361.0, 22045.0], [360.0, 15104.0], [359.0, 17039.0], [353.0, 19553.0], [352.0, 19110.0], [355.0, 20124.0], [354.0, 16150.0], [358.0, 15871.0], [357.0, 15380.0], [356.0, 17074.0], [382.0, 20168.0], [383.0, 17475.0], [381.0, 20814.0], [380.0, 15790.0], [379.0, 16662.0], [378.0, 17185.0], [377.0, 15304.0], [376.0, 16997.0], [375.0, 18211.0], [369.0, 19057.0], [368.0, 13938.0], [371.0, 14619.0], [370.0, 21611.0], [374.0, 21339.0], [373.0, 18112.0], [372.0, 19390.0], [398.0, 15504.0], [399.0, 13902.0], [397.0, 17037.0], [396.0, 16563.0], [395.0, 19055.0], [394.0, 15007.0], [393.0, 17204.0], [392.0, 14802.0], [391.0, 16810.333333333332], [387.0, 13046.0], [386.0, 18391.0], [385.0, 15088.0], [384.0, 17283.0], [388.0, 15900.0], [414.0, 17332.0], [415.0, 14485.0], [413.0, 16704.0], [412.0, 18326.0], [411.0, 13588.0], [410.0, 12905.0], [409.0, 17141.0], [408.0, 14245.0], [407.0, 13631.0], [401.0, 13943.0], [400.0, 15902.0], [403.0, 12439.0], [402.0, 20106.0], [406.0, 18861.0], [405.0, 15656.0], [404.0, 15466.0], [431.0, 19702.0], [430.0, 19414.666666666668], [419.0, 16657.0], [418.0, 11699.0], [417.0, 19455.0], [416.0, 17416.0], [427.0, 19249.0], [426.0, 19274.0], [425.0, 19148.0], [424.0, 18592.0], [423.0, 19699.0], [422.0, 19362.0], [421.0, 19224.0], [420.0, 19548.0], [445.0, 19822.0], [446.0, 18683.0], [444.0, 19096.0], [442.0, 19907.0], [441.0, 19549.0], [440.0, 19534.0], [439.0, 19407.0], [438.0, 19388.0], [435.0, 19590.0], [434.0, 19175.666666666668], [462.0, 19352.0], [463.0, 19852.0], [461.0, 19544.0], [460.0, 19904.0], [459.0, 19947.0], [458.0, 19703.0], [457.0, 19812.0], [456.0, 20012.0], [455.0, 19758.0], [451.0, 18971.0], [450.0, 19603.75], [454.0, 19461.0], [453.0, 19898.0], [478.0, 19965.0], [464.0, 14563.0], [465.0, 17498.0], [467.0, 19951.0], [466.0, 19754.0], [471.0, 19564.0], [470.0, 20085.0], [469.0, 19768.0], [468.0, 20009.0], [479.0, 19993.0], [477.0, 20026.0], [476.0, 20096.0], [475.0, 19958.0], [474.0, 19887.0], [473.0, 19977.0], [472.0, 19585.0], [494.0, 18248.0], [495.0, 18020.0], [493.0, 18312.0], [492.0, 18102.0], [491.0, 17895.5], [489.0, 18668.0], [488.0, 18239.0], [487.0, 17990.0], [481.0, 20023.0], [480.0, 20067.0], [483.0, 19834.0], [482.0, 18625.0], [486.0, 19945.0], [485.0, 20022.0], [484.0, 20001.0], [499.0, 11151.0], [498.0, 18099.0], [497.0, 17702.0], [496.0, 17670.0]], "isOverall": false, "label": "register", "isController": false}, {"data": [[250.62199999999996, 35369.57800000001]], "isOverall": false, "label": "register-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 499.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 57.45, "minX": 1.71994098E12, "maxY": 6506.483333333334, "series": [{"data": [[1.7199411E12, 1156.8166666666666], [1.71994104E12, 6506.483333333334], [1.71994116E12, 207.35], [1.71994098E12, 3706.2833333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7199411E12, 319.1666666666667], [1.71994104E12, 1793.1166666666666], [1.71994116E12, 57.45], [1.71994098E12, 1018.3333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71994116E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 18211.399999999998, "minX": 1.71994098E12, "maxY": 147786.77777777778, "series": [{"data": [[1.7199411E12, 82076.62], [1.71994104E12, 33227.94661921708], [1.71994116E12, 147786.77777777778], [1.71994098E12, 18211.399999999998]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71994116E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 18211.368750000012, "minX": 1.71994098E12, "maxY": 147786.66666666666, "series": [{"data": [[1.7199411E12, 82076.59999999999], [1.71994104E12, 33227.93950177937], [1.71994116E12, 147786.66666666666], [1.71994098E12, 18211.368750000012]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71994116E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 16.555555555555557, "minX": 1.71994098E12, "maxY": 17.071174377224203, "series": [{"data": [[1.7199411E12, 16.8], [1.71994104E12, 17.071174377224203], [1.71994116E12, 16.555555555555557], [1.71994098E12, 16.80624999999999]], "isOverall": false, "label": "register", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71994116E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9246.0, "minX": 1.71994098E12, "maxY": 151372.0, "series": [{"data": [[1.7199411E12, 86126.0], [1.71994104E12, 54185.0], [1.71994116E12, 151372.0], [1.71994098E12, 24439.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7199411E12, 79134.0], [1.71994104E12, 16078.0], [1.71994116E12, 144445.0], [1.71994098E12, 9246.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7199411E12, 85251.0], [1.71994104E12, 50600.8], [1.71994116E12, 151372.0], [1.71994098E12, 20025.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7199411E12, 86126.0], [1.71994104E12, 53772.060000000005], [1.71994116E12, 151372.0], [1.71994098E12, 22978.659999999967]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7199411E12, 81341.5], [1.71994104E12, 31484.0], [1.71994116E12, 147819.0], [1.71994098E12, 19030.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7199411E12, 85854.9], [1.71994104E12, 52461.0], [1.71994116E12, 151372.0], [1.71994098E12, 20846.3]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71994116E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10198.5, "minX": 1.0, "maxY": 148778.5, "series": [{"data": [[2.0, 22471.5], [10.0, 18100.5], [47.0, 81637.0], [12.0, 17186.0], [3.0, 113293.5], [50.0, 32957.5], [55.0, 49465.0], [14.0, 19188.0], [15.0, 27584.5], [1.0, 10198.5], [16.0, 20554.0], [17.0, 25932.5], [75.0, 19579.0], [18.0, 26438.5], [19.0, 21710.0], [24.0, 35064.5], [6.0, 148778.5], [7.0, 53333.0], [29.0, 24922.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 75.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 10198.5, "minX": 1.0, "maxY": 148778.5, "series": [{"data": [[2.0, 22471.5], [10.0, 18100.5], [47.0, 81637.0], [12.0, 17186.0], [3.0, 113293.5], [50.0, 32957.5], [55.0, 49465.0], [14.0, 19188.0], [15.0, 27584.0], [1.0, 10198.5], [16.0, 20554.0], [17.0, 25932.5], [75.0, 19579.0], [18.0, 26438.5], [19.0, 21710.0], [24.0, 35064.5], [6.0, 148778.5], [7.0, 53333.0], [29.0, 24922.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 75.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.71994098E12, "maxY": 8.333333333333334, "series": [{"data": [[1.71994098E12, 8.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71994098E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.71994098E12, "maxY": 4.683333333333334, "series": [{"data": [[1.7199411E12, 0.8333333333333334], [1.71994104E12, 4.683333333333334], [1.71994116E12, 0.15], [1.71994098E12, 2.6666666666666665]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71994116E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.71994098E12, "maxY": 4.683333333333334, "series": [{"data": [[1.7199411E12, 0.8333333333333334], [1.71994104E12, 4.683333333333334], [1.71994116E12, 0.15], [1.71994098E12, 2.6666666666666665]], "isOverall": false, "label": "register-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71994116E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.71994098E12, "maxY": 4.683333333333334, "series": [{"data": [[1.7199411E12, 0.8333333333333334], [1.71994104E12, 4.683333333333334], [1.71994116E12, 0.15], [1.71994098E12, 2.6666666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71994116E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

